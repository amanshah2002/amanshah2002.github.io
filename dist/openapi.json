{
  "openapi": "3.0.3",
  "info": {
    "title": "Ease my event",
    "description": "Event app APIs",
    "version": "1.0.0"
  },
  "paths": {
    "/retailer/register": {
      "post": {
        "summary": "Register a retailer to our platform",
        "tags": [
          "Retailer"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "contactNo",
                  "contactName",
                  "shops"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the retailer"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the retailer"
                  },
                  "contactName": {
                    "type": "string",
                    "description": "Name of the contact person"
                  },
                  "shops": {
                    "type": "array",
                    "description": "Details of all the shops of the retailer",
                    "items": {
                      "type": "object",
                      "required": [
                        "address",
                        "name",
                        "contactNo",
                        "companyId"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shop"
                        },
                        "contactNo": {
                          "type": "number",
                          "description": "Contact number of the shop"
                        },
                        "companyId": {
                          "type": "string",
                          "description": "ID of the retailer who owns the shop"
                        },
                        "address": {
                          "type": "object",
                          "required": [
                            "state",
                            "city",
                            "zip",
                            "fullAddress"
                          ],
                          "properties": {
                            "state": {
                              "type": "string",
                              "description": "State in which the shop is located"
                            },
                            "city": {
                              "type": "string",
                              "description": "City in which the shop is located"
                            },
                            "zip": {
                              "type": "string",
                              "description": "Pin code of the area in which the shop is located"
                            },
                            "fullAddress": {
                              "type": "string",
                              "description": "Full address of the shop with the area name and exact address"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Retailer registered successfully"
                }
              }
            }
          },
          "409": {
            "description": "Retailer already exists"
          }
        }
      }
    },
    "/user/verifyOTP": {
      "post": {
        "summary": "Verify the OTP sent by the user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "otp"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user (should be an exact 10-digit number)"
                  },
                  "otp": {
                    "type": "number",
                    "description": "OTP sent by the user (should be an exact 4-digit number)"
                  }
                }
              },
              "example": {
                "contactNo": 8888888888,
                "otp": 2345
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "OTP matched"
                }
              }
            }
          },
          "401": {
            "description": "OTP does not match"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User is already verified"
          }
        }
      }
    },
    "/user/verification/{contactNumber}": {
      "get": {
        "summary": "Get the verification status of the user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactNumber",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "Contact number of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Type of the user (bride or groom)"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "Verification status of the user"
                    },
                    "contactNo": {
                      "type": "number",
                      "description": "Contact number of the user"
                    }
                  }
                },
                "example": {
                  "type": "groom",
                  "verified": false,
                  "contactNo": 9999999999
                }
              }
            }
          },
          "400": {
            "description": "Contact number was not provided"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/createPassword": {
      "post": {
        "summary": "Set the user's password",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "password"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password that the user wants to set"
                  }
                }
              },
              "example": {
                "contactNo": 9999999999,
                "password": "Abced@330"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Password created successfully"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User is already verified"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login using contact number and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "password"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user's account"
                  }
                }
              },
              "example": {
                "contactNo": 9999999999,
                "password": "Abced@330"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message and JWT token will be returned"
          },
          "401": {
            "description": "User is not verified or password does not match"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/event/create": {
      "post": {
        "summary": "Create an event",
        "tags": [
          "Event"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organizers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "First name of the organizer"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last name of the organizer"
                        },
                        "contactNo": {
                          "type": "integer",
                          "description": "Contact number of the organizer"
                        },
                        "occasionRole": {
                          "type": "string",
                          "description": "Special role of the user with respect to the occasion",
                          "enum": [
                            "bride",
                            "groom",
                          ]
                        }
                      },
                      "required": [
                        "firstName",
                        "lastName",
                        "contactNo",
                        "occasionRole"
                      ]
                    }
                  },
                  "shopId": {
                    "type": "string",
                    "description": "Id of the shop through which event was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the event"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code used for registering"
                  },
                },
                "example": {
                  "organizers": [
                    {
                      "firstName": "john",
                      "lastName": "doe",
                      "contactNo": 1111111111,
                      "occasionRole": "groom"
                    },
                    {
                      "firstName": "test",
                      "lastName": "bride",
                      "contactNo": 7777777777,
                      "occasionRole": "bride"
                    }
                  ],
                  "name": "johns marraige",
                  "code": "INY39Q"
                },
                "required": [
                  "organizers",
                  "shopId",
                  "name",
                  "code",
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Event created successfully.",
                  "event": {
                    "organizers": "64e730eb4f203b6f6b0dcc15",
                    "name": "johns marraige",
                    "shop": null,
                    "code": "64e5bbef80a21cf7e4a7ec1e",
                    "type": "Wedding",
                    "functions": [],
                    "_id": "64e730eb4f203b6f6b0dcc16",
                    "createdAt": "2023-08-24T10:28:59.307Z",
                    "updatedAt": "2023-08-24T10:28:59.307Z",
                    "__v": 0
                  }
                }
              }
            }
          },
          "402": {
            "description": "Cannot create event, retailer has used all the credits"
          },
          "404": {
            "description": "Shop not found or retailer relating to this shop was not found"
          },
          "409": {
            "description": "User with this number already exists"
          }
        }
      }
    },
    "/contacts/getParsedContacts": {
      "post": {
        "summary": "Get contacts parsed a json objects",
        "tags": [
          "Contacts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "contacts": {
                    "type": "string",
                    "format": "binary",
                    "description": "Vcf file containing contacts"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parsed file will be returned as object",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "VCARD": {
                      "VERSION": "3.0",
                      "N": "Doe;John;;Mr.",
                      "FN": "John Doe",
                      "ORG": "ABC Corporation",
                      "TITLE": "Software Engineer",
                      "EMAIL": {
                        "value": "john.doe@example.com",
                        "params": [
                          {
                            "TYPE": "work"
                          }
                        ]
                      },
                      "TEL": {
                        "value": "1234567890",
                        "params": [
                          {
                            "TYPE": "work,voice"
                          }
                        ]
                      },
                      "ADR": {
                        "value": ";;123 Main St;City;State;12345;Country",
                        "params": [
                          {
                            "TYPE": "work"
                          }
                        ]
                      },
                      "URL": "http://www.example.com"
                    },
                    "": ""
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contacts field not provided"
          }
        }
      }
    },
    "/task/create": {
      "post": {
        "summary": "Create a task",
        "tags": [
          "Tasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "category",
                  "assignee",
                  "author",
                  "name",
                  "description",
                  "startDate",
                  "dueDate",
                  "address",
                  "priority",
                  "namePOC",
                  "contactPOC"
                ],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Id of the selected category of task"
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Id of the user to whom the task is assigned"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "The id of the event to which the task is related"
                  },
                  "author": {
                    "type": "string",
                    "description": "Id of the user who created the task"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "description/content of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the task"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Due date of the task"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address of the place where the task needs to be performed"
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the task",
                    "enum": [
                      "Low",
                      "Medium",
                      "High"
                    ]
                  },
                  "namePOC": {
                    "type": "string",
                    "description": "The name of the point of contact",
                  },
                  "contactPOC": {
                    "type": "number",
                    "description": "The contact number of the point of contact",
                  },
                },
                "example": {
                  "category": "64e5c2262ff75be2d9e837d9",
                  "assignedTo": "64e5bc1c80a21cf7e4a7ec3e",
                  "eventId": "64e5bc1c80a21cf7e4a7ec42",
                  "author": "64e5bc1b80a21cf7e4a7ec3a",
                  "name": "test task",
                  "description": "test task description",
                  "startDate": "2023-07-05T12:34:56Z",
                  "dueDate": "2023-07-05T12:34:56Z",
                  "address": "test address",
                  "priority": "low",
                  "namePOC": "test name",
                  "contactPOC": 3333333333,
                  "checkList": [
                    {
                      "name": "test checklist"
                    },
                    {
                      "name": "test checklist2"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task edited successfully"
          },
          "404": {
            "description": "[Event not provided, Task not found, Category not found, Assignee not found ]"
          },
          "400": {
            "description": "[Task id required, Event id required]"
          }
        }
      }
    },
    "/task/edit/{taskId}": {
      "put": {
        "summary": "Edit a task",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the task that is to be edited"
          },
        ],
        "tags": [
          "Tasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "category",
                  "assignee",
                  "name",
                  "description",
                  "startDate",
                  "dueDate",
                  "address",
                  "priority",
                  "namePOC",
                  "contactPOC"
                ],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Id of the selected category of task"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "The id of the event to which the task is related to"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The id of the user who has created the task"
                  },
                  "assignedTo": {
                    "type": "string",
                    "description": "Id of the user to whom the task is assigned to"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "description/content of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the task"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Due date of the task"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address of the place where the task needs to be performed"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the task",
                    "enum": [
                      "in_progress",
                      "completed",
                      "Todo"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the task",
                    "enum": [
                      "Low",
                      "Medium",
                      "High"
                    ]
                  },
                  "namePOC": {
                    "type": "string",
                    "description": "The name of the point of contact",
                  },
                  "contactPOC": {
                    "type": "number",
                    "description": "The contact number of the point of contact",
                  },
                },
                "example": {
                  "category": "64e5c2262ff75be2d9e837d9",
                  "assignedTo": "64e5bc1c80a21cf7e4a7ec3e",
                  "eventId": "64e5bc1c80a21cf7e4a7ec42",
                  "author": "64e5bc1b80a21cf7e4a7ec3a",
                  "name": "test updated task",
                  "description": "test task description",
                  "startDate": "2023-07-05T12:34:56Z",
                  "dueDate": "2023-07-05T12:34:56Z",
                  "address": "test address",
                  "status": "in_progress",
                  "priority": "Low",
                  "namePOC": "test name",
                  "contactPOC": 3333333333
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task edited successfully"
          },
          "404": {
            "description": "[Event not provided, Task not found, Category not found, Assignee not found ]"
          },
          "400": {
            "description": "[Task id required, Event id required]"
          }
        }
      }
    },
    "/task/getAllTasks": {
      "get": {
        "summary": "Get all tasks in an event",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of tasks is needed"
          },
          {
            "in": "query",
            "name": "currentPage",
            "schema": {
              "type": "number"
            },
            "required": false,
            "description": "The current page the user is on (meant for pagination)"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "number"
            },
            "required": false,
            "description": "Records that the user will see per page (meant for pagination)"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": [
                "Low",
                "High",
                "Highest",
                "Lowest"
              ]
            },
            "required": false,
            "description": "Filter based on priority of the task",
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "todo"
              ]
            },
            "required": false,
            "description": "Filter based on status of the task",
          },
          {
            "in": "query",
            "name": "commentSort",
            "schema": {
              "type": "string",
              "enum": [
                "-createdAt",
                "createdAt",
                "-liked",
                "liked"
              ]
            },
            "required": false,
            "description": "Sort task comments. [1: -createdAt: Sort comments based on when they were created in descending order, 2: createdAt: Sort comments based on when they were created in ascending order, 3: -liked: Sort comments based the likedBy property in descending order, 4: liked: Sort comments based the likedBy property in ascending order ]",
          },
          {
            "in": "query",
            "name": "assignedTo",
            "schema": {
              "type": "string",
            },
            "required": false,
            "description": "Filter based on the person who the task was assigned to (should be the id of the assignee)",
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
            },
            "required": false,
            "description": "Check if the name or description of the task includes the provided search text",
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "event": {
                          "type": "object",
                          "properties": {
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "roles": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "_id": {
                              "type": "string"
                            },
                            "organizers": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "shop": {
                              "type": "string"
                            },
                            "__v": {
                              "type": "integer"
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        }
                      }
                    },
                    "event": {
                      "type": "object",
                      "properties": {
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "_id": {
                          "type": "string"
                        },
                        "organizers": {
                          "type": "object",
                          "properties": {
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "_id": {
                              "type": "string"
                            },
                            "organizers": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "__v": {
                              "type": "integer"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "shop": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "address": {
                              "type": "object",
                              "properties": {
                                "state": {
                                  "type": "string"
                                },
                                "city": {
                                  "type": "string"
                                },
                                "zip": {
                                  "type": "integer"
                                },
                                "fullAddress": {
                                  "type": "string"
                                },
                                "_id": {
                                  "type": "string"
                                }
                              }
                            },
                            "contactNo": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "creditsUsed": {
                              "type": "integer"
                            },
                            "users": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "retailerId": {
                              "type": "string"
                            },
                            "__v": {
                              "type": "integer"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        }
                      }
                    },
                    "assignee": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "contactNo": {
                          "type": "integer"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "occasionRole": {
                          "type": "string"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "event": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              },
                              "_id": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        },
                        "password": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "address": {
                      "type": "string"
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "Low",
                        "Medium",
                        "High"
                      ]
                    },
                    "namePOC": {
                      "type": "string"
                    },
                    "contactPOC": {
                      "type": "integer"
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "author": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "task": {
                            "type": "string"
                          },
                          "replies": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "author": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "replies": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "_id": {
                                        "type": "string"
                                      },
                                      "createdAt": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "author": {
                                        "type": "string"
                                      },
                                      "description": {
                                        "type": "string"
                                      },
                                      "replies": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "_id": {
                                              "type": "string"
                                            },
                                            "createdAt": {
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "author": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "replies": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "_id": {
                                                    "type": "string"
                                                  },
                                                  "createdAt": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "author": {
                                                    "type": "string"
                                                  },
                                                  "description": {
                                                    "type": "string"
                                                  },
                                                  "replies": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "_id": {
                                                          "type": "string"
                                                        },
                                                        "createdAt": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "author": {
                                                          "type": "string"
                                                        },
                                                        "description": {
                                                          "type": "string"
                                                        },
                                                        "replies": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "_id": {
                                                                "type": "string"
                                                              },
                                                              "createdAt": {
                                                                "type": "string",
                                                                "format": "date-time"
                                                              },
                                                              "author": {
                                                                "type": "string"
                                                              },
                                                              "description": {
                                                                "type": "string"
                                                              },
                                                              "replies": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "_id": {
                                                                      "type": "string"
                                                                    },
                                                                    "createdAt": {
                                                                      "type": "string",
                                                                      "format": "date-time"
                                                                    },
                                                                    "author": {
                                                                      "type": "string"
                                                                    },
                                                                    "description": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "taggedUsers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "contactNo": {
                                  "type": "integer"
                                },
                                "verified": {
                                  "type": "boolean"
                                },
                                "occasionRole": {
                                  "type": "string"
                                },
                                "events": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "event": {
                                        "type": "string"
                                      },
                                      "role": {
                                        "type": "string"
                                      },
                                      "_id": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "__v": {
                                  "type": "integer"
                                },
                                "password": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          },
                          "__v": {
                            "type": "integer"
                          },
                          "edited": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "__v": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/task/delete/{taskId}": {
      "delete": {
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to delete",
            "required": true,
            "schema": {
              "type": "string"
            },
          },
          {
            "name": "authorId",
            "in": "query",
            "description": "ID of the user who wants to delete the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
        ],
        "tags": [
          "Tasks"
        ],
        "responses": {
          "200": {
            "description": "Task successfully deleted"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/category/create": {
      "post": {
        "summary": "Create a category",
        "tags": [
          "Categories"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category",
                  },
                  "eventId": {
                    "type": "string",
                    "description": "The id of the event for which the category it to be created"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created successfully"
          },
          "404": {
            "description": "Event not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/category/getAllCategories": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of categories is needed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "name": {
                        "type": "string"
                      },
                      "__v": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/comment/create": {
      "post": {
        "summary": "Create a comment",
        "tags": [
          "Comments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "author",
                  "description",
                  "taskId"
                ],
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "The id of the user who created the comment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description/content of the comment"
                  },
                  "parentId": {
                    "type": "string",
                    "description": "The id of the parent comment. (Only if the comment is a reply)"
                  },
                  "taskId": {
                    "type": "string",
                    "description": "The id of task to which the comment is related to"
                  },
                  "image": {
                    "type": "array",
                    "items": {},
                    "description": "the base64 string of images attached in the comment"
                  }
                },
                "example": {
                  "author": "64e5bc1b80a21cf7e4a7ec3a",
                  "taskId": "64e5dc1c08f58f448baf9ec1",
                  "description": "hi <@ 64e5bc1c80a21cf7e4a7ec3e @>, this is a parent comment",
                  "images": [
                    "base64string"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment created successfully"
          },
          "404": {
            "description": "[User not found, Task not found, Comment not found, Assignee not found ]"
          },
          "400": {
            "description": "Task id required"
          }
        }
      }
    },
    "/comment/edit/{commentId}": {
      "put": {
        "summary": "Edit a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment to be edited",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Comments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "author",
                  "description",
                ],
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "The id of the user who created the comment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description/content of the comment"
                  }
                },
                "example": {
                  "description": "hi test",
                  "author": "64e5bc1b80a21cf7e4a7ec3a"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "404": {
            "description": "Comment not found, Assignee not found"
          },
          "401": {
            "description": "Only author can edit this comment"
          }
        }
      }
    },
    "/comment/delete/{commentId}": {
      "delete": {
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
        ],
        "tags": [
          "Comments"
        ],
        "responses": {
          "200": {
            "description": "Comment successfully deleted"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/getAllUsers": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of categories is needed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "contactNo": {
                        "type": "number"
                      },
                      "verified": {
                        "type": "boolean"
                      },
                      "occasionRole": {
                        "type": "string"
                      },
                      "events": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "event": {
                              "type": "object",
                              "properties": {
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "roles": {
                                  "type": "array",
                                  "items": {}
                                },
                                "_id": {
                                  "type": "string"
                                },
                                "organizers": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "shop": {
                                  "type": "string"
                                },
                                "__v": {
                                  "type": "number"
                                }
                              }
                            },
                            "role": {
                              "type": "string"
                            },
                            "_id": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "__v": {
                        "type": "number"
                      },
                      "password": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/code/create": {
      "post": {
        "summary": "Generated unique codes for event registration",
        "tags": [
          "Code"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "creditsBought",
                  "price",
                ],
                "properties": {
                  "creditsBought": {
                    "type": "number",
                    "description": "Number of codes the retailer wants to purchase"
                  },
                  "price": {
                    "type": "number",
                    "description": "The price at which each code was purchased"
                  },
                  "retailerId": {
                    "type": "string",
                    "description": "The id of the retailer who has bought the codes"
                  }
                },
                "example": {
                  "creditsBought": 10,
                  "price": 100,
                  "type": "wedding"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code generated successfully"
          },
          "404": {
            "description": "Retailer not found, Task not found"
          },
          "400": {
            "description": "Retailer id required"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/checklist/edit/{checklistId}": {
      "put": {
        "summary": "Edit a checklist",
        "parameters": [
          {
            "in": "path",
            "name": "checklistId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the checklist that is to be edited"
          },
        ],
        "tags": [
          "Checklist"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "status",
                  "authorId"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the checklist"
                  },
                  "status": {
                    "type": "boolean",
                    "description": "Status of the checklist (true/false)"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The id of the user who has executed the request"
                  }
                },
                "example": {
                  "name": "hello",
                  "status": true,
                  "authorId": "64be71f3f3ad57bfb296bf62?authorId=64afb57eee055edc3086cc45"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checklist edited successfully"
          },
          "404": {
            "description": "[Author not found, Checklist not found]"
          },
          "400": {
            "description": "[Checklist id required, Author id required]"
          },
          "401": {
            "description": "Only author of this task can edit the checklist"
          }
        }
      }
    },
    "/auth/resendOTP": {
      "post": {
        "summary": "Resend otp on the user's number",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user."
                  }
                },
                "example": {
                  "contactNo": 6666666667
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Otp sent"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User already verified"
          },
        }
      }
    },
    "/function/create": {
      "post": {
        "summary": "Create a function",
        "tags": [
          "Function"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "icon",
                  "userId"
                ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the function"
                    },
                    "icon": {
                      "type": "string",
                      "description": "The id of the icon to used"
                    },
                    "eventId": {
                      "type": "string",
                      "description": "The id of the event to which the the function is related to"
                    },
                    "userId": {
                      "type": "string",
                      "description": "The id of the user who has executed the request"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the function"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date of the function"
                    },
                    "venue": {
                      "type": "string",
                      "description": "The venue of the function"
                    },
                    "startTime": {
                      "type": "string",
                      "description": "The starting time of the function"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "The ending time of the function"
                    },
                    "city": {
                      "type": "string",
                      "description": "The city in which the function is organized"
                    }
                  }
              },
              "example": 
                {
                  "name": "Haldi",
                  "iconId": "64c7bb85fb7a6973b490790a",
                  "eventId": "64d09f0395c974611afd9266",
                  "userId": "64cb73d348b75fc7f7c3eead",
                  "description": "haldi description",
                  "date": "2023-07-05T12:34:56Z",
                  "venue": "test venue",
                  "startTime": "10am",
                  "endTime": "11am",
                  "city": "Ahmedabad"
                }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "422": {
            "description": "Validation Error"
          },
          "409": {
            "description": "Function already exists (duplicate name)"
          },
          "404": {
            "description": "[Icon not found, Event not found, User not found]"
          },
          "400": {
            "description": "Event id required"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/function/{functionId}": {
      "put": {
        "summary": "edit a function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function that is to be edited"
          },
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "iconId",
                  "date",
                  "venue",
                  "city",
                  "startTime",
                  "endTime",
                  "description",
                  "userId",
                  "eventId"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "iconId": {
                    "type": "string"
                  },
                  "eventId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "venue": {
                    "type": "string"
                  },
                  "startTime": {
                    "type": "string"
                  },
                  "endTime": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Haldi",
                "iconId": "64c7bb85fb7a6973b490790a",
                "eventId": "64d09f0395c974611afd9266",
                "userId": "64cb73d348b75fc7f7c3eead",
                "description": "haldi description",
                "date": "2023-07-05T12:34:56Z",
                "venue": "test venue",
                "startTime": "10am",
                "endTime": "11am",
                "city": "Ahmedabad"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "422": {
            "description": "Validation Error"
          },
          "409": {
            "description": "Function already exists (duplicate name)"
          },
          "404": {
            "description": "[Icon not found, Event not found, User not found]"
          },
          "400": {
            "description": "Event id required"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/function/getNames": {
      "get": {
        "summary": "Get name of all the functions in an event",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which function names are to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "name": "Haldi",
                    "_id": "6abcdef6tr"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/function/getAll": {
      "get": {
        "summary": "Get all the functions in an event",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which functions are to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/function/get/{functionId}": {
      "get": {
        "summary": "Get function by id",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function which is to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response"
          },
        }
      }
    },
    "/function/delete/{functionId}": {
      "delete": {
        "summary": "Delete a function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function that is to be deleted"
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event to which the function belongs to"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the user who has executed the request"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/function/delete/{functionId}/guest": {
      "delete": {
        "summary": "Remove a guest from the function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function "
          },
          {
            "in": "query",
            "name": "guestId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the guest which is to be removed from the function"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/icon/upload": {
      "post": {
        "summary": "Upload an icon",
        "tags": [
          "Icon"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "icon",
                  "name",
                  "userId"
                ],
                "properties": {
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "the file containing an icon"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The id of the user who has executed the request"
                  }
                }
              },
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          },
          "400": {
            "description": "[Icon required, template type should be png or svg]"
          },
          "422": {
            "description": "Validation"
          }
        }
      }
    },
    "/icon/getAll": {
      "get": {
        "summary": "Get all the icons",
        "tags": [
          "Icon"
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/icon/delete/{iconId}": {
      "delete": {
        "summary": "Delete an icon",
        "tags": [
          "Icon"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "iconId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the icon which is to be deleted",
            "required": true
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user who has executed the request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/user/addGuest": {
      "post": {
        "summary": "Add a guest user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "gender",
                  "contactNo",
                  "eventId",
                  "functionIds"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name of the guest user"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the guest user"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the guest user (male/female)",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags related to the guest"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "meals": {
                    "type": "string",
                    "description": "Meal preference of the user"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "Id of the event in which the guest user is added"
                  },
                  "functionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Ids of the functions the guest user is invited to"
                  },
                  "friendsAndFamily": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "First name of the guest user"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last name of the guest user"
                        },
                        "gender": {
                          "type": "string",
                          "description": "Gender of the guest user (male/female)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Tags related to the guest"
                        },
                        "contactNo": {
                          "type": "number",
                          "description": "Contact number of the user"
                        },
                        "meals": {
                          "type": "string",
                          "description": "Meal preference of the user"
                        },
                        "functionIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Ids of the functions the guest user is invited to"
                        }
                      },
                      "description": "Friends and family of the guest user"
                    }
                  }
                }
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "gender": "male",
                "eventId": "event123",
                "tags": [
                  "VIP",
                  "SpecialGuest"
                ],
                "contactNo": 1234567890,
                "meals": "Vegetarian",
                "functionIds": [
                  "function123",
                  "function456"
                ],
                "friendsAndFamily": [
                  {
                    "firstName": "Jane",
                    "lastName": "Doe",
                    "gender": "female",
                    "tags": [
                      "Family"
                    ],
                    "contactNo": 9876543210,
                    "meals": "Non-Vegetarian",
                    "functionIds": [
                      "function123"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/user/addAdmin": {
      "post": {
        "summary": "Add an admin user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "gender",
                  "contactNo",
                  "eventId"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name of the admin"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the admin"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the admin male/female"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the admin"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "Id of the event in which the admin user is to be added"
                  }
                }
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "gender": "male",
                "contactNo": 1234567890,
                "eventId": "event123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/template/upload": {
      "post": {
        "summary": "Upload an invitation template",
        "tags": [
          "Invitation template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "invitationTemplate",
                  "userId",
                ],
                "properties": {
                  "invitationTemplate": {
                    "type": "string",
                    "format": "binary",
                    "description": "File containing the template (png/svg)"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The id of the user executing the request"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags related to the template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucess response"
          },
          "400": {
            "description": "[Template required, Template type should be png/svg"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/template/getAll": {
      "get": {
        "summary": "Get all templates",
        "tags": [
          "Invitation template"
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/template/delete/{templateId}": {
      "delete": {
        "summary": "Delete a template",
        "tags": [
          "Invitation template"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "schema": {
              "type": "string",
            },
            "required": true,
            "description": "The id of the template that is to be deleted"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the user trying to execute the request"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          },
          "400": {
            "description": "Template not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    },
    "/comment/{commentId}/like": {
      "put": {
        "summary": "Like a comment",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "string",
            },
            "required": true,
            "description": "Id of the comment which is to be liked"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The id of the user who liked the comment"
                  }
                },
                "example": {
                  "userId": "64e5bc1b80a21cf7e4a7ec3a"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "msg": "Comment liked!",
                    "comment": {
                      "_id": "64e6fc2c2924ce4085474bf1",
                      "author": "64e5bc1b80a21cf7e4a7ec3a",
                      "description": "hi test",
                      "image": [],
                      "task": "64e5dc1c08f58f448baf9ec1",
                      "replies": [],
                      "taggedUsers": [],
                      "likedBy": [
                        "64e5bc1b80a21cf7e4a7ec3a"
                      ],
                      "createdAt": "2023-08-24T06:43:57.083Z",
                      "updatedAt": "2023-08-24T06:50:13.028Z",
                      "__v": 2,
                      "edited": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/task/{taskId}": {
      "get": {
        "summary": "Get task by id",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the task that is to be fetched"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "_id": "64e5dc1c08f58f448baf9ec1",
                    "category": {
                      "_id": "64e5c2262ff75be2d9e837d9",
                      "name": "test",
                      "createdAt": "2023-08-23T08:24:06.061Z",
                      "updatedAt": "2023-08-23T08:24:06.061Z",
                      "__v": 0
                    },
                    "event": "64e5bc1c80a21cf7e4a7ec42",
                    "assignedTo": {
                      "_id": "64e5bc1c80a21cf7e4a7ec3e",
                      "contactNo": 7777777777,
                      "verified": true,
                      "events": [
                        {
                          "event": "64e5bc1c80a21cf7e4a7ec42",
                          "role": "SUPER ADMIN",
                          "occasionRole": "bride",
                          "firstName": "test",
                          "lastName": "bride",
                          "gender": "female",
                          "tags": null,
                          "friendsAndFamily": [],
                          "meals": null,
                          "_id": "64e5bc1c80a21cf7e4a7ec3f"
                        }
                      ],
                      "createdAt": "2023-08-23T07:58:20.413Z",
                      "updatedAt": "2023-08-23T08:06:07.261Z",
                      "__v": 0,
                      "password": "$2b$12$OUN3Hchfhkzbj5fQ/5ktvOvu6Eyz3lA97G0mjA5Qy3oIe0MyT/Aaq"
                    },
                    "author": {
                      "_id": "64e5bc1b80a21cf7e4a7ec3a",
                      "contactNo": 1111111111,
                      "verified": false,
                      "otp": 60952,
                      "events": [
                        {
                          "event": "64e5bc1c80a21cf7e4a7ec42",
                          "role": "SUPER ADMIN",
                          "occasionRole": "groom",
                          "firstName": "john",
                          "lastName": "doe",
                          "gender": "male",
                          "tags": null,
                          "friendsAndFamily": [],
                          "meals": null,
                          "_id": "64e5bc1b80a21cf7e4a7ec3b"
                        }
                      ],
                      "createdAt": "2023-08-23T07:58:19.892Z",
                      "updatedAt": "2023-08-23T07:58:22.204Z",
                      "__v": 0
                    },
                    "name": "test task",
                    "description": "test task description",
                    "startDate": "2023-07-05T12:34:56.000Z",
                    "dueDate": "2023-07-05T12:34:56.000Z",
                    "address": "test address",
                    "priority": "HIGH",
                    "namePOC": "test name",
                    "contactPOC": 3333333333,
                    "isComparable": false,
                    "comments": [
                      {
                        "_id": "64e60295495347477475bf4f",
                        "author": "64e5bc1b80a21cf7e4a7ec3a",
                        "description": "hi <@ 64e5bc1c80a21cf7e4a7ec3e @>, this is a parent comment",
                        "image": [],
                        "task": "64e5dc1c08f58f448baf9ec1",
                        "replies": [],
                        "taggedUsers": [
                          {
                            "_id": "64e5bc1c80a21cf7e4a7ec3e",
                            "contactNo": 7777777777,
                            "verified": true,
                            "events": [
                              {
                                "event": "64e5bc1c80a21cf7e4a7ec42",
                                "role": "SUPER ADMIN",
                                "occasionRole": "bride",
                                "firstName": "test",
                                "lastName": "bride",
                                "gender": "female",
                                "tags": null,
                                "friendsAndFamily": [],
                                "meals": null,
                                "_id": "64e5bc1c80a21cf7e4a7ec3f"
                              }
                            ],
                            "createdAt": "2023-08-23T07:58:20.413Z",
                            "updatedAt": "2023-08-23T08:06:07.261Z",
                            "__v": 0,
                            "password": "$2b$12$OUN3Hchfhkzbj5fQ/5ktvOvu6Eyz3lA97G0mjA5Qy3oIe0MyT/Aaq"
                          }
                        ],
                        "likedBy": [],
                        "createdAt": "2023-08-23T12:59:02.085Z",
                        "updatedAt": "2023-08-23T13:00:54.587Z",
                        "__v": 1
                      },
                      {
                        "_id": "64e6fc2c2924ce4085474bf1",
                        "author": "64e5bc1b80a21cf7e4a7ec3a",
                        "description": "hi test",
                        "image": [],
                        "task": "64e5dc1c08f58f448baf9ec1",
                        "replies": [],
                        "taggedUsers": [],
                        "likedBy": [
                          "64e5bc1b80a21cf7e4a7ec3a"
                        ],
                        "createdAt": "2023-08-24T06:43:57.083Z",
                        "updatedAt": "2023-08-24T06:50:13.028Z",
                        "__v": 2,
                        "edited": true
                      }
                    ],
                    "checkList": [
                      {
                        "_id": "64e5dc1c08f58f448baf9ec3",
                        "name": "test checklist",
                        "status": false,
                        "task": "64e5dc1c08f58f448baf9ec1",
                        "createdAt": "2023-08-23T10:14:52.425Z",
                        "updatedAt": "2023-08-23T10:14:52.425Z",
                        "__v": 0
                      },
                      {
                        "_id": "64e5dc1c08f58f448baf9ec5",
                        "name": "test checklist2",
                        "status": false,
                        "task": "64e5dc1c08f58f448baf9ec1",
                        "createdAt": "2023-08-23T10:14:52.650Z",
                        "updatedAt": "2023-08-23T10:14:52.650Z",
                        "__v": 0
                      }
                    ],
                    "status": "TODO",
                    "createdAt": "2023-08-23T10:14:52.172Z",
                    "updatedAt": "2023-08-24T06:43:56.654Z",
                    "__v": 3
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/{eventId}": {
      "get": {
        "summary": "Get event by id",
        "tags": [
          "Event"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "schema": {
              "type": "string",
            },
            "required": true,
            "description": "The id of the event to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "64e5bc1c80a21cf7e4a7ec42",
                    "organizers": {
                      "_id": "64e5bc1c80a21cf7e4a7ec41",
                      "organizers": [
                        {
                          "_id": "64e5bc1b80a21cf7e4a7ec3a",
                          "contactNo": 1111111111,
                          "verified": false,
                          "otp": 60952,
                          "events": [
                            {
                              "event": "64e5bc1c80a21cf7e4a7ec42",
                              "role": "SUPER ADMIN",
                              "occasionRole": "groom",
                              "firstName": "john",
                              "lastName": "doe",
                              "gender": "male",
                              "tags": null,
                              "friendsAndFamily": [],
                              "meals": null,
                              "_id": "64e5bc1b80a21cf7e4a7ec3b"
                            },
                            {
                              "event": "64e730eb4f203b6f6b0dcc16",
                              "role": "SUPER ADMIN",
                              "occasionRole": "groom",
                              "firstName": "john",
                              "lastName": "doe",
                              "gender": "male",
                              "tags": null,
                              "friendsAndFamily": [],
                              "meals": null,
                              "_id": "64e730ea4f203b6f6b0dcc0f"
                            }
                          ],
                          "createdAt": "2023-08-23T07:58:19.892Z",
                          "updatedAt": "2023-08-24T10:29:00.232Z",
                          "__v": 1
                        },
                        {
                          "_id": "64e5bc1c80a21cf7e4a7ec3e",
                          "contactNo": 7777777777,
                          "verified": true,
                          "events": [
                            {
                              "event": "64e5bc1c80a21cf7e4a7ec42",
                              "role": "SUPER ADMIN",
                              "occasionRole": "bride",
                              "firstName": "test",
                              "lastName": "bride",
                              "gender": "female",
                              "tags": null,
                              "friendsAndFamily": [],
                              "meals": null,
                              "_id": "64e5bc1c80a21cf7e4a7ec3f"
                            },
                            {
                              "event": "64e730eb4f203b6f6b0dcc16",
                              "role": "SUPER ADMIN",
                              "occasionRole": "bride",
                              "firstName": "test",
                              "lastName": "bride",
                              "gender": "female",
                              "tags": null,
                              "friendsAndFamily": [],
                              "meals": null,
                              "_id": "64e730ea4f203b6f6b0dcc13"
                            }
                          ],
                          "createdAt": "2023-08-23T07:58:20.413Z",
                          "updatedAt": "2023-08-24T10:29:00.665Z",
                          "__v": 1,
                          "password": "$2b$12$OUN3Hchfhkzbj5fQ/5ktvOvu6Eyz3lA97G0mjA5Qy3oIe0MyT/Aaq"
                        }
                      ],
                      "createdAt": "2023-08-23T07:58:20.772Z",
                      "updatedAt": "2023-08-23T07:58:20.772Z",
                      "__v": 0
                    },
                    "name": "johns marraige",
                    "shop": null,
                    "code": {
                      "_id": "64e5bbee80a21cf7e4a7ec1b",
                      "code": "INY39Q",
                      "used": true,
                      "price": 100,
                      "retailerId": null,
                      "type": "wedding",
                      "createdAt": "2023-08-23T07:57:34.909Z",
                      "updatedAt": "2023-08-23T07:58:23.124Z",
                      "__v": 0,
                      "eventId": "64e5bc1c80a21cf7e4a7ec42"
                    },
                    "type": "Wedding",
                    "functions": [],
                    "createdAt": "2023-08-23T07:58:21.075Z",
                    "updatedAt": "2023-08-23T07:58:21.075Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invitation/create": {
      "post": {
        "summary": "Create an invitation for a function",
        "tags": [
          "Invitation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "template",
                  "function",
                  "sectionConfig"
                ],
                "properties": {
                  "template": {
                    "type": "string",
                    "description": "The id of the template used for creating the invitation"
                  },
                  "function": {
                    "type": "string",
                    "description": "The id of the function to which the invitation is related to"
                  },
                  "sectionConfig": {
                    "type": "object",
                    "description": "The object containing different sections and their configurations",
                    "required": [
                      "title"
                    ],
                    "properties": {
                      "title": {
                        "type": "object",
                        "description": "The object having the name of the section which contains the position and text",
                        "required": [
                          "position",
                          "text"
                        ],
                        "properties": {
                          "position": {
                            "type": "object",
                            "description": "Object containing the x and y coordinates of the section",
                            "required": [
                              "x",
                              "y"
                            ],
                            "properties": {
                              "x": {
                                "type": "number",
                                "description": "The x coordinate of the section (in pixels)"
                              },
                              "y": {
                                "type": "number",
                                "description": "The y coordinate of the section (in pixels)"
                              }
                            }
                          },
                          "text": {
                            "type": "string",
                            "description": "The text content of the section"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "template": "64e8341823f1c67607fbccb0",
                  "function": "64ec7d88917266cca9e3bf1f",
                  "sectionConfig": {
                    "title": {
                      "position": {
                        "x": 0,
                        "y": -55
                      },
                      "text": "test 2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "msg": "Invitation created successfully",
                    "invitation": {
                      "sectionConfig": {
                        "title": {
                          "position": {
                            "x": 0,
                            "y": -55,
                            "_id": "64ec9837fa428f7568d184ba"
                          },
                          "text": "test 2",
                          "_id": "64ec9837fa428f7568d184b9"
                        },
                        "_id": "64ec9837fa428f7568d184b8"
                      },
                      "template": "64e8341823f1c67607fbccb0",
                      "function": "64ec7d88917266cca9e3bf1f",
                      "_id": "64ec9837fa428f7568d184b7",
                      "createdAt": "2023-08-28T12:51:03.358Z",
                      "updatedAt": "2023-08-28T12:51:03.358Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invitation/getInvitation/{invitationId}": {
      "get": {
        "summary": "Get invitation by id",
        "tags": [
          "Invitation"
        ],
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the template to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "64ec6ebcd676d3f18364293e",
                    "sectionConfig": {
                      "title": {
                        "position": {
                          "x": 0,
                          "y": 0,
                          "_id": "64ec6ebcd676d3f183642941"
                        },
                        "text": "test",
                        "_id": "64ec6ebcd676d3f183642940"
                      },
                      "_id": "64ec6ebcd676d3f18364293f"
                    },
                    "template": {
                      "_id": "64e8341823f1c67607fbccb0",
                      "path": "http://localhost:3000/uploads/invitationTemplates/uploads/invitationTemplates/2023-08                -25T04:54:48.132Z - butterfly.png",
                      "tags": [],
                      "createdAt": "2023-08-25T04:54:48.145Z",
                      "updatedAt": "2023-08-28T09:58:17.705Z",
                      "__v": 3,
                      "invitations": [
                        "64ec674fee8a9f1553ce2db4",
                        "64ec6ebcd676d3f18364293e",
                        "64ec6fb91a2ee6c8e603343c"
                      ]
                    },
                    "function": {
                      "_id": "64ec623cf7479c679620f758",
                      "name": "mehendi",
                      "eventId": "64e5bc1c80a21cf7e4a7ec42",
                      "guestList": [],
                      "__v": 0,
                      "createdAt": "2023-08-28T09:00:44.183Z",
                      "updatedAt": "2023-08-28T09:58:18.009Z",
                      "invite": "64ec6fb91a2ee6c8e603343c"
                    },
                    "__v": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invitation/getAllInvitations": {
      "get": {
        "summary": "Get all invitations related to a function",
        "tags": [
          "Invitation"
        ],
        "parameters": [
          {
            "name": "functionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function for which invitations are to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "_id": "64ec7dc5004db57ba2ff2702",
                      "sectionConfig": {
                        "title": {
                          "position": {
                            "x": 0,
                            "y": 0,
                            "_id": "64ec7dc5004db57ba2ff2705"
                          },
                          "text": "test",
                          "_id": "64ec7dc5004db57ba2ff2704"
                        },
                        "_id": "64ec7dc5004db57ba2ff2703"
                      },
                      "template": {
                        "_id": "64e8341823f1c67607fbccb0",
                        "path": "http://localhost:3000/http://localhost:3000/uploads/invitationTemplates/2023-08              -25T04:54:48.132Z - butterfly.png",
                        "tags": [],
                        "createdAt": "2023-08-25T04:54:48.145Z",
                        "updatedAt": "2023-08-28T10:59:53.303Z",
                        "__v": 6,
                        "invitations": [
                          "64ec674fee8a9f1553ce2db4",
                          "64ec6ebcd676d3f18364293e",
                          "64ec6fb91a2ee6c8e603343c",
                          "64ec77064638b219c2a8c3fa",
                          "64ec7dc5004db57ba2ff2702",
                          "64ec7e2951e9567d808d9c3a"
                        ]
                      },
                      "function": {
                        "_id": "64ec7d88917266cca9e3bf1f",
                        "name": "mehendi",
                        "eventId": "64e5bc1c80a21cf7e4a7ec42",
                        "invite": [
                          "64ec7dc5004db57ba2ff2702",
                          "64ec7e2951e9567d808d9c3a"
                        ],
                        "guestList": [],
                        "__v": 2,
                        "createdAt": "2023-08-28T10:57:12.322Z",
                        "updatedAt": "2023-08-28T10:59:53.524Z"
                      },
                      "createdAt": "2023-08-28T10:58:13.100Z",
                      "updatedAt": "2023-08-28T10:58:13.100Z",
                      "__v": 0
                    },
                    {
                      "_id": "64ec7e2951e9567d808d9c3a",
                      "sectionConfig": {
                        "title": {
                          "position": {
                            "x": 0,
                            "y": -55,
                            "_id": "64ec7e2951e9567d808d9c3d"
                          },
                          "text": "test 2",
                          "_id": "64ec7e2951e9567d808d9c3c"
                        },
                        "_id": "64ec7e2951e9567d808d9c3b"
                      },
                      "template": {
                        "_id": "64e8341823f1c67607fbccb0",
                        "path": "http://localhost:3000/http://localhost:3000/uploads/invitationTemplates/2023-08              -25T04:54:48.132Z - butterfly.png",
                        "tags": [],
                        "createdAt": "2023-08-25T04:54:48.145Z",
                        "updatedAt": "2023-08-28T10:59:53.303Z",
                        "__v": 6,
                        "invitations": [
                          "64ec674fee8a9f1553ce2db4",
                          "64ec6ebcd676d3f18364293e",
                          "64ec6fb91a2ee6c8e603343c",
                          "64ec77064638b219c2a8c3fa",
                          "64ec7dc5004db57ba2ff2702",
                          "64ec7e2951e9567d808d9c3a"
                        ]
                      },
                      "function": {
                        "_id": "64ec7d88917266cca9e3bf1f",
                        "name": "mehendi",
                        "eventId": "64e5bc1c80a21cf7e4a7ec42",
                        "invite": [
                          "64ec7dc5004db57ba2ff2702",
                          "64ec7e2951e9567d808d9c3a"
                        ],
                        "guestList": [],
                        "__v": 2,
                        "createdAt": "2023-08-28T10:57:12.322Z",
                        "updatedAt": "2023-08-28T10:59:53.524Z"
                      },
                      "createdAt": "2023-08-28T10:59:53.081Z",
                      "updatedAt": "2023-08-28T10:59:53.081Z",
                      "__v": 0
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invitation/edit/{invitationId}": {
      "put": {
        "summary": "Edit an invitation",
        "tags": [
          "Invitation"
        ],
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the template to be edited"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "template",
                  "sectionConfig"
                ],
                "properties": {
                  "template": {
                    "type": "string",
                    "description": "The id of the template used for creating the invitation"
                  },
                  "sectionConfig": {
                    "type": "object",
                    "description": "The object containing different sections and their configurations",
                    "required": [
                      "title"
                    ],
                    "properties": {
                      "title": {
                        "type": "object",
                        "description": "The object having the name of the section which contains the position and text",
                        "required": [
                          "position",
                          "text"
                        ],
                        "properties": {
                          "position": {
                            "type": "object",
                            "description": "Object containing the x and y coordinates of the section",
                            "required": [
                              "x",
                              "y"
                            ],
                            "properties": {
                              "x": {
                                "type": "number",
                                "description": "The x coordinate of the section (in pixels)"
                              },
                              "y": {
                                "type": "number",
                                "description": "The y coordinate of the section (in pixels)"
                              }
                            }
                          },
                          "text": {
                            "type": "string",
                            "description": "The text content of the section"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "template": "64e8341823f1c67607fbccb0",
                  "sectionConfig": {
                    "title": {
                      "position": {
                        "x": 0,
                        "y": -55
                      },
                      "text": "test 2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "msg": "Invitation updated successfully",
                    "updatedInvitation": {
                      "_id": "64ec7dc5004db57ba2ff2702",
                      "sectionConfig": {
                        "title": {
                          "position": {
                            "x": 0,
                            "y": -55,
                            "_id": "64ec8e0e45e5e6d62f72e024"
                          },
                          "text": "test 2",
                          "_id": "64ec8e0e45e5e6d62f72e023"
                        },
                        "_id": "64ec8e0e45e5e6d62f72e022"
                      },
                      "template": "64e8341823f1c67607fbccb0",
                      "function": "64ec7d88917266cca9e3bf1f",
                      "createdAt": "2023-08-28T10:58:13.100Z",
                      "updatedAt": "2023-08-28T12:07:42.545Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invitation/delete/{invitationId}": {
      "delete": {
        "summary": "Delete an invitation",
        "tags": [
          "Invitation"
        ],
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the template to be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "msg": "Invitation deleted successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comment/addImages/{commentId}": {
      "post": {
        "summary": "Add images to a comment",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the comment in which the image is to be added"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "commentImage",
                  "authorId"
                ],
                "properties": {
                  "commentImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file of the image to be uploaded"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The Id of the user who wants to add image to the comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "msg": "Images added successfully",
                    "images": [
                      {
                        "path": "http://localhost:3000/uploads/commentImages/2023-09-04T06:25:14.689Z - invitation                  (4).png",
                        "_id": "64f5784adb1d9c3084cfb863",
                        "__v": 0,
                        "createdAt": "2023-09-04T06:25:14.695Z",
                        "updatedAt": "2023-09-04T06:25:14.695Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comment/deleteImage/{commentId}": {
      "delete": {
        "summary": "Delete image from a comment",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the comment from which the image is to be deleted"
          },
          {
            "in": "query",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the image to be deleted"
          },
          {
            "in": "query",
            "name": "authorId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the user who wants to delete the image"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response",
          }
        },
      }
    },
    "/task/addImages/{taskId}": {
      "post": {
        "summary": "Add images to a task",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the task in which the image is to be added"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "taskImage",
                  "authorId"
                ],
                "properties": {
                  "taskImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file of the image to be uploaded"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The Id of the user who wants to add image to the task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "msg": "Images added successfully",
                    "images": [
                      {
                        "path": "http://localhost:3000/uploads/taskImages/2023-09-04T06:46:56.266Z - invitation (2               ).png",
                        "_id": "64f57d603d8f1f4867fa8725",
                        "__v": 0,
                        "createdAt": "2023-09-04T06:46:56.285Z",
                        "updatedAt": "2023-09-04T06:46:56.285Z"
                      },
                      {
                        "path": "http://localhost:3000/uploads/taskImages/2023-09-04T06:46:56.271Z - invitation (3               ).png",
                        "_id": "64f57d603d8f1f4867fa8726",
                        "__v": 0,
                        "createdAt": "2023-09-04T06:46:56.285Z",
                        "updatedAt": "2023-09-04T06:46:56.285Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/task/deleteImage/{taskId}": {
      "delete": {
        "summary": "Delete image from a task",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the task from which the image is to be deleted"
          },
          {
            "in": "query",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the image to be deleted"
          },
          {
            "in": "query",
            "name": "authorId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the user who wants to delete the image"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response",
          }
        },
      }
    },
    
    "/user/getEvents": {
      "get": {
        "summary": "Get Events related to a user",
        "tags": ["User"],
        "parameters": [
          {
          "in": "query",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "the id of the user whose events are to be fetched"
          }
        ],
        
        "responses": {
          "200": {
            "description": "success response",
            "content":{
              "application/json": {
                "schema": {
                  "example": [
                  {
                      "event": {
                          "_id": "652fce67c42aadfe098bf8ba",
                          "organizers": "652fce67c42aadfe098bf8b8",
                          "name": "test event",
                          "shop": null,
                          "code": "64e5bbf080a21cf7e4a7ec24",
                          "type": "Wedding",
                          "functions": [
                              "652fd7a7daaeb1ef278a122a",
                              "652fdd2c60d609f96cc1dbe9"
                          ],
                          "createdAt": "2023-10-18T12:24:07.868Z",
                          "updatedAt": "2023-10-18T13:27:24.221Z",
                          "__v": 28
                      },
                      "role": "SUPER ADMIN",
                      "occasionRole": "GROOM",
                      "firstName": "Aman",
                      "lastName": "shah",
                      "gender": "male",
                      "tags": null,
                      "friendsAndFamily": [],
                      "rsvp": false,
                      "meals": null,
                      "_id": "652fce67c42aadfe098bf8b6"
                 }
                ]
                }
              }
            }
          }
        }
      }
    },
    
    "/code/{code}": {
      "get": {
        "summary": "Get details of the code",
        "tags": ["Code"],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The code for which details are to be fetched"
          }],
          
          "responses": {
            "200":{
              "description": "Success response",
              "content": {
                "application/json": {
                  "schema":{
                    "example": {                  
                      "_id": "64e5bbf180a21cf7e4a7ec27",
                      "code": "TIY327",
                      "used": false,
                      "price": 100,
                      "retailerId": null,
                      "type": "wedding",
                      "createdAt": "2023-08-23T07:57:37.113Z",
                      "updatedAt": "2023-08-23T07:57:37.113Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
      }
    }
  }
}