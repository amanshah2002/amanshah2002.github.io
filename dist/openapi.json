{
  "openapi": "3.0.3",
  "info": {
    "title": "Ease my event",
    "description": "Event app APIs",
    "version": "1.0.0"
  },
  "components": {
    "schemas": {
      "Retailer": {
        "type": "object",
        "required": [
          "name",
          "contactNo",
          "contactName",
          "creditsBought",
          "shops"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the retailer"
          },
          "name": {
            "type": "string",
            "description": "The name of the retailer"
          },
          "contactNo": {
            "type": "number",
            "description": "Contact number of the retailer"
          },
          "contactName": {
            "type": "string",
            "description": "Name of the contact person"
          },
          "creditsBought": {
            "type": "number",
            "description": "The credits bought by the retailer"
          },
          "creditsUsed": {
            "type": "number",
            "description": "The credits sold/used by the retailer (this will be automatically calculated by the backend, the default value is 0)"
          },
          "shops": {
            "type": "array",
            "description": "The IDs of all the shops of the retailer",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "required": [
          "organizers",
          "shop",
          "name",
          "code",
          "type"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the Event"
          },
          "organizers": {
            "type": "string",
            "description": "ID of the registered event organizers"
          },
          "shop": {
            "type": "string",
            "description": "ID of the shop form where organizers were registered"
          },
          "name": {
            "type": "string",
            "description": "Name of the event"
          },
          "code": {
            "type": "string",
            "description": "Code of the qr code"
          },
          "type": {
            "type": "string",
            "description": "Name of the event"
          }
        }
      },
      "Organizers": {
        "type": "array",
        "description": "Stores an array containing ids of organizers of the event",
        "items": {
          "type": "string"
        }
      },
      "Users": {
        "type": "object",
        "required": [
          "name",
          "contactNo",
          "events"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the user"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "contactNo": {
            "type": "number",
            "description": "Contact number of the user"
          },
          "verified": {
            "type": "boolean",
            "description": "If the user has verified his/her account"
          },
          "otp": {
            "type": "number",
            "description": "OTP sent to the user's number (will be deleted after user creates a password)"
          },
          "password": {
            "type": "string",
            "description": "Password for the user's account (will be set after user has verified his otp)"
          },
          "occasionRole": {
            "type": "string",
            "description": "Special of the user relating to the occasion (eg: Bride/Groom)"
          },
          "events": {
            "type": "array",
            "description": "The list of all the events the user is related to",
            "items": {
              "type": "object",
              "required": [
                "event",
                "role"
              ],
              "properties": {
                "event": {
                  "type": "string",
                  "description": "The IDs of the events the user is related to"
                },
                "role": {
                  "type": "string",
                  "description": "The role of the user in the event (Super Admin/Admin/Guest)"
                }
              }
            }
          }
        }
      },
      "Shops": {
        "type": "object",
        "required": [
          "address",
          "contactNo",
          "name",
          "creditsUsed",
          "retailerId",
          "users"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the Event"
          },
          "address": {
            "type": "object",
            "description": "The address of the shop",
            "required": [
              "state",
              "city",
              "zip",
              "fullAddress"
            ],
            "properties": {
              "state": {
                "type": "string",
                "description": "State where the shop is located"
              },
              "city": {
                "type": "string",
                "description": "City where the shop is located"
              },
              "zip": {
                "type": "number",
                "description": "Pin code of the area where shop is located"
              },
              "fullAddress": {
                "type": "string",
                "description": "Full address of the shop"
              }
            }
          },
          "contactNo": {
            "type": "number",
            "description": "Contact number of the shop"
          },
          "name": {
            "type": "string",
            "description": "Name of the shop"
          },
          "creditsUsed": {
            "type": "number",
            "description": "Credits used/sold by the shops"
          },
          "retailerId": {
            "type": "string",
            "description": "ID of the retailer who owns the shop"
          },
          "users": {
            "type": "array",
            "description": "Array containing IDs of the organizers who register to our platform through that shop",
            "items": {}
          }
        }
      },
      "Tasks": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "assignee": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "Low",
              "Medium",
              "High"
            ]
          },
          "namePOC": {
            "type": "string"
          },
          "contactPOC": {
            "type": "number"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Categories": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "event": {
            "type": "object"
          }
        }
      },
      "EventCodes": {
        "type": "object",
        "required": [
          "code",
          "used",
          "price",
          "eventId",
          "createdAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the code"
          },
          "code": {
            "type": "string",
            "description": "The 6 character long alpha numeric code"
          },
          "price": {
            "type": "number",
            "description": "The price at which the code was purchased"
          },
          "retailerId": {
            "type": "string",
            "description": "Id of the retailer who purchased the codes"
          },
          "eventId": {
            "type": "number",
            "description": "The credits bought by the retailer"
          },
          "used": {
            "type": "boolean",
            "description": "Whether the code was used in an event or not"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "description": "Date and time when the record was created in utc.",
          }
        }
      },
      "checklist": {
        "type": "object",
        "required": [
          "name",
          "status",
          "task",
          "createdAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the code"
          },
          "name": {
            "type": "string",
            "description": "Name of the checklist"
          },
          "status": {
            "type": "boolean",
            "description": "Status of the checklist (true/false)"
          },
          "task": {
            "type": "string",
            "description": "Id of the task to which the checklist is related to"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "description": "Date and time when the record was created in utc.",
          }
        }
      },
      "InvitationTemplate": {
        "type": "object",
        "required": [
          "path",
          "createdAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated ID of the code"
          },
          "path": {
            "type": "string",
            "description": "Path of the image containing the template."
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "description": "Date and time when the record was created in utc.",
          }
        }
      },
      "Function": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date",
            "description": "the date and time when the record was created"
          },
          "name": {
            "type": "string",
            "description": "date"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the function"
          },
          "venue": {
            "type": "string",
            "description": "Venue of the function"
          },
          "endTime": {
            "type": "string",
            "format": "date",
            "description": "End time of the function"
          },
          "startTime": {
            "type": "string",
            "format": "date",
            "description": "Start time of the function"
          },
          "description": {
            "type": "string",
            "description": "Description of the function"
          },
          "eventId": {
            "type": "string",
            "description": "Id of the event the function is related to of the function"
          },
          "iconId": {
            "type": "string",
            "description": "Id of the icon which is to be used in the function"
          },
          "guestList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of guest user ids who are invited in the function"
          }
        }
      },
      "Icon": {
        "type": "object",
        "required": [
          "path",
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time and date at which the record was created"
          },
          "name": {
            "type": "string",
            "description": "Name of the icon",
          },
          "path": {
            "type": "string",
            "format": "binary",
            "description": "File containing the icon",
          },
        }
      }
    },
  },
  "paths": {
    "/retailer/register": {
      "post": {
        "summary": "Register a retailer to our platform",
        "tags": [
          "Retailer"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "contactNo",
                  "contactName",
                  "shops"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the retailer"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the retailer"
                  },
                  "contactName": {
                    "type": "string",
                    "description": "Name of the contact person"
                  },
                  "shops": {
                    "type": "array",
                    "description": "Details of all the shops of the retailer",
                    "items": {
                      "type": "object",
                      "required": [
                        "address",
                        "name",
                        "contactNo",
                        "companyId"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shop"
                        },
                        "contactNo": {
                          "type": "number",
                          "description": "Contact number of the shop"
                        },
                        "companyId": {
                          "type": "string",
                          "description": "ID of the retailer who owns the shop"
                        },
                        "address": {
                          "type": "object",
                          "required": [
                            "state",
                            "city",
                            "zip",
                            "fullAddress"
                          ],
                          "properties": {
                            "state": {
                              "type": "string",
                              "description": "State in which the shop is located"
                            },
                            "city": {
                              "type": "string",
                              "description": "City in which the shop is located"
                            },
                            "zip": {
                              "type": "string",
                              "description": "Pin code of the area in which the shop is located"
                            },
                            "fullAddress": {
                              "type": "string",
                              "description": "Full address of the shop with the area name and exact address"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Retailer registered successfully"
                }
              }
            }
          },
          "409": {
            "description": "Retailer already exists"
          }
        }
      }
    },
    "/user/verifyOTP": {
      "post": {
        "summary": "Verify the OTP sent by the user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "otp"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user (should be an exact 10-digit number)"
                  },
                  "otp": {
                    "type": "number",
                    "description": "OTP sent by the user (should be an exact 4-digit number)"
                  }
                }
              },
              "example": {
                "contactNo": 8888888888,
                "otp": 2345
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "OTP matched"
                }
              }
            }
          },
          "401": {
            "description": "OTP does not match"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User is already verified"
          }
        }
      }
    },
    "/user/verification/{contactNumber}": {
      "get": {
        "summary": "Get the verification status of the user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactNumber",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "Contact number of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Type of the user (bride or groom)"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "Verification status of the user"
                    },
                    "contactNo": {
                      "type": "number",
                      "description": "Contact number of the user"
                    }
                  }
                },
                "example": {
                  "type": "groom",
                  "verified": false,
                  "contactNo": 9999999999
                }
              }
            }
          },
          "400": {
            "description": "Contact number was not provided"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/createPassword": {
      "post": {
        "summary": "Set the user's password",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "password"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password that the user wants to set"
                  }
                }
              },
              "example": {
                "contactNo": 9999999999,
                "password": "Abced@330"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Password created successfully"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User is already verified"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login using contact number and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo",
                  "password"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user's account"
                  }
                }
              },
              "example": {
                "contactNo": 9999999999,
                "password": "Abced@330"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message and JWT token will be returned"
          },
          "401": {
            "description": "User is not verified or password does not match"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/event/create": {
      "post": {
        "summary": "Create an event",
        "tags": [
          "Event"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organizers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "First name of the organizer"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last name of the organizer"
                        },
                        "contactNo": {
                          "type": "integer",
                          "description": "Contact number of the organizer"
                        },
                        "occasionRole": {
                          "type": "string",
                          "description": "Special role of the user with respect to the occasion"
                        }
                      },
                      "required": [
                        "firstName",
                        "lastName",
                        "contactNo",
                        "occasionRole"
                      ]
                    }
                  },
                  "shopId": {
                    "type": "string",
                    "description": "Id of the shop through which event was created"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the event"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code used for registering"
                  },
                },
                "required": [
                  "organizers",
                  "shopId",
                  "name",
                  "code",
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "msg": "Event created successfully"
                }
              }
            }
          },
          "402": {
            "description": "Cannot create event, retailer has used all the credits"
          },
          "404": {
            "description": "Shop not found or retailer relating to this shop was not found"
          },
          "409": {
            "description": "User with this number already exists"
          }
        }
      }
    },
    "/contacts/getParsedContacts": {
      "post": {
        "summary": "Get contacts parsed a json objects",
        "tags": [
          "Contacts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "contacts": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parsed file will be returned as object"
          },
          "404": {
            "description": "Contacts field not provided"
          }
        }
      }
    },
    "/task/create": {
      "post": {
        "summary": "Create a task",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The id of the event to which the task is related to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Tasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "category",
                  "assignee",
                  "author",
                  "name",
                  "description",
                  "startDate",
                  "dueDate",
                  "address",
                  "priority",
                  "namePOC",
                  "contactPOC"
                ],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Id of the selected category of task"
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Id of the user to whom the task is assigned"
                  },
                  "author": {
                    "type": "string",
                    "description": "Id of the user who created the task"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "description/content of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the task"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Due date of the task"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address of the place where the task needs to be performed"
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the task",
                    "enum": [
                      "Low",
                      "Lowest",
                      "High",
                      "Highest"
                    ]
                  },
                  "namePOC": {
                    "type": "string",
                    "description": "The name of the point of contact",
                  },
                  "contactPOC": {
                    "type": "number",
                    "description": "The contact number of the point of contact",
                  },
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task edited successfully"
          },
          "404": {
            "description": "[Event not provided, Task not found, Category not found, Assignee not found ]"
          },
          "400": {
            "description": "[Task id required, Event id required]"
          }
        }
      }
    },
    "/task/edit/{taskId}": {
      "put": {
        "summary": "Edit a task",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the task that is to be edited"
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event to which the task belongs to"
          },
          {
            "in": "query",
            "name": "authorId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the user who wants to edit the task"
          }
        ],
        "tags": [
          "Tasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "category",
                  "assignee",
                  "name",
                  "description",
                  "startDate",
                  "dueDate",
                  "address",
                  "priority",
                  "namePOC",
                  "contactPOC"
                ],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Id of the selected category of task"
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Id of the user who created the task"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the task"
                  },
                  "description": {
                    "type": "string",
                    "description": "description/content of the task"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the task"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Due date of the task"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address of the place where the task needs to be performed"
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the task",
                    "enum": [
                      "Low",
                      "Lowest",
                      "High",
                      "Highest"
                    ]
                  },
                  "namePOC": {
                    "type": "string",
                    "description": "The name of the point of contact",
                  },
                  "contactPOC": {
                    "type": "number",
                    "description": "The contact number of the point of contact",
                  },
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task edited successfully"
          },
          "404": {
            "description": "[Event not provided, Task not found, Category not found, Assignee not found ]"
          },
          "400": {
            "description": "[Task id required, Event id required]"
          }
        }
      }
    },
    "/task/getAllTasks": {
      "get": {
        "summary": "Get all tasks in an event",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of tasks is needed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "event": {
                          "type": "object",
                          "properties": {
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "roles": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "_id": {
                              "type": "string"
                            },
                            "organizers": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "shop": {
                              "type": "string"
                            },
                            "__v": {
                              "type": "integer"
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        }
                      }
                    },
                    "event": {
                      "type": "object",
                      "properties": {
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "_id": {
                          "type": "string"
                        },
                        "organizers": {
                          "type": "object",
                          "properties": {
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "_id": {
                              "type": "string"
                            },
                            "organizers": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "__v": {
                              "type": "integer"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "shop": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "address": {
                              "type": "object",
                              "properties": {
                                "state": {
                                  "type": "string"
                                },
                                "city": {
                                  "type": "string"
                                },
                                "zip": {
                                  "type": "integer"
                                },
                                "fullAddress": {
                                  "type": "string"
                                },
                                "_id": {
                                  "type": "string"
                                }
                              }
                            },
                            "contactNo": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "creditsUsed": {
                              "type": "integer"
                            },
                            "users": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "retailerId": {
                              "type": "string"
                            },
                            "__v": {
                              "type": "integer"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        }
                      }
                    },
                    "assignee": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "contactNo": {
                          "type": "integer"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "occasionRole": {
                          "type": "string"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "event": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              },
                              "_id": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "__v": {
                          "type": "integer"
                        },
                        "password": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "address": {
                      "type": "string"
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "Low",
                        "Lowest",
                        "High",
                        "Highest"
                      ]
                    },
                    "namePOC": {
                      "type": "string"
                    },
                    "contactPOC": {
                      "type": "integer"
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "author": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "task": {
                            "type": "string"
                          },
                          "replies": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "author": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "replies": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "_id": {
                                        "type": "string"
                                      },
                                      "createdAt": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "author": {
                                        "type": "string"
                                      },
                                      "description": {
                                        "type": "string"
                                      },
                                      "replies": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "_id": {
                                              "type": "string"
                                            },
                                            "createdAt": {
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "author": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "replies": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "_id": {
                                                    "type": "string"
                                                  },
                                                  "createdAt": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                  },
                                                  "author": {
                                                    "type": "string"
                                                  },
                                                  "description": {
                                                    "type": "string"
                                                  },
                                                  "replies": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "_id": {
                                                          "type": "string"
                                                        },
                                                        "createdAt": {
                                                          "type": "string",
                                                          "format": "date-time"
                                                        },
                                                        "author": {
                                                          "type": "string"
                                                        },
                                                        "description": {
                                                          "type": "string"
                                                        },
                                                        "replies": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "_id": {
                                                                "type": "string"
                                                              },
                                                              "createdAt": {
                                                                "type": "string",
                                                                "format": "date-time"
                                                              },
                                                              "author": {
                                                                "type": "string"
                                                              },
                                                              "description": {
                                                                "type": "string"
                                                              },
                                                              "replies": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "_id": {
                                                                      "type": "string"
                                                                    },
                                                                    "createdAt": {
                                                                      "type": "string",
                                                                      "format": "date-time"
                                                                    },
                                                                    "author": {
                                                                      "type": "string"
                                                                    },
                                                                    "description": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "taggedUsers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "contactNo": {
                                  "type": "integer"
                                },
                                "verified": {
                                  "type": "boolean"
                                },
                                "occasionRole": {
                                  "type": "string"
                                },
                                "events": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "event": {
                                        "type": "string"
                                      },
                                      "role": {
                                        "type": "string"
                                      },
                                      "_id": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "__v": {
                                  "type": "integer"
                                },
                                "password": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          },
                          "__v": {
                            "type": "integer"
                          },
                          "edited": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "__v": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/task/delete/{taskId}": {
      "delete": {
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to delete",
            "required": true,
            "schema": {
              "type": "string"
            },
          },
          {
            "name": "authorId",
            "in": "query",
            "description": "ID of the user who wants to delete the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
        ],
        "tags": [
          "Tasks"
        ],
        "responses": {
          "200": {
            "description": "Task successfully deleted"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/category/create": {
      "post": {
        "summary": "Create a category",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The id of the event to which the category is related to (Add category only for a specific event)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Categories"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category",
                  },
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created successfully"
          },
          "404": {
            "description": "Event not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/category/getAllCategories": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of categories is needed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "name": {
                        "type": "string"
                      },
                      "__v": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/comment/create": {
      "post": {
        "summary": "Create a comment",
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "The id of the task to which the comment is related to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Comments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "author",
                  "description",
                ],
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "The id of the user who created the comment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description/content of the comment"
                  },
                  "parentId": {
                    "type": "string",
                    "description": "The id of the parent comment. (Only if the comment is a reply)"
                  },
                  "image": {
                    "type": "array",
                    "items": {},
                    "description": "the base64 string of images attached in the comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment created successfully"
          },
          "404": {
            "description": "[User not found, Task not found, Comment not found, Assignee not found ]"
          },
          "400": {
            "description": "Task id required"
          }
        }
      }
    },
    "/comment/edit/{commentId}": {
      "put": {
        "summary": "Edit a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment to be edited",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Comments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "author",
                  "description",
                ],
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "The id of the user who created the comment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description/content of the comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "404": {
            "description": "Comment not found, Assignee not found"
          },
          "401": {
            "description": "Only author can edit this comment"
          }
        }
      }
    },
    "/comment/delete/{commentId}": {
      "delete": {
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
        ],
        "tags": [
          "Comments"
        ],
        "responses": {
          "200": {
            "description": "Comment successfully deleted"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/getAllUsers": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which list of categories is needed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "contactNo": {
                        "type": "number"
                      },
                      "verified": {
                        "type": "boolean"
                      },
                      "occasionRole": {
                        "type": "string"
                      },
                      "events": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "event": {
                              "type": "object",
                              "properties": {
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "roles": {
                                  "type": "array",
                                  "items": {}
                                },
                                "_id": {
                                  "type": "string"
                                },
                                "organizers": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "shop": {
                                  "type": "string"
                                },
                                "__v": {
                                  "type": "number"
                                }
                              }
                            },
                            "role": {
                              "type": "string"
                            },
                            "_id": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "__v": {
                        "type": "number"
                      },
                      "password": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event id not provided"
          }
        }
      }
    },
    "/code/create": {
      "post": {
        "summary": "Generated unique codes for event registration",
        "parameters": [
          {
            "name": "retailerId",
            "in": "query",
            "description": "The id retailer who purchased the codes",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Code"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "creditsBought",
                  "price",
                ],
                "properties": {
                  "creditsBought": {
                    "type": "number",
                    "description": "Number of codes the retailer wants to purchase"
                  },
                  "price": {
                    "type": "number",
                    "description": "The price at which each code was purchased"
                  },
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code generated successfully"
          },
          "404": {
            "description": "Retailer not found, Task not found"
          },
          "400": {
            "description": "Retailer id required"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/checklist/edit/{checklistId}": {
      "put": {
        "summary": "Edit a checklist",
        "parameters": [
          {
            "in": "path",
            "name": "checklistId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the checklist that is to be edited"
          },
          {
            "in": "query",
            "name": "authorId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the author of the task"
          },
        ],
        "tags": [
          "Checklist"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "status"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the checklist"
                  },
                  "status": {
                    "type": "boolean",
                    "description": "Status of the checklist (true/false)"
                  },
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checklist edited successfully"
          },
          "404": {
            "description": "[Author not found, Checklist not found]"
          },
          "400": {
            "description": "[Checklist id required, Author id required]"
          },
          "401": {
            "description": "Only author of this task can edit the checklist"
          }
        }
      }
    },
    "/auth/resendOTP": {
      "post": {
        "summary": "Resend otp on the user's number",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactNo"
                ],
                "properties": {
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Otp sent"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User already verified"
          },
        }
      }
    },
    "/function/create": {
      "post": {
        "summary": "Create a function",
        "tags": [
          "Function"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "iconId": {
                      "type": "string"
                    },
                    "eventId": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "venue": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "city": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": [
                {
                  "name": "Haldi",
                  "iconId": "64c7bb85fb7a6973b490790a",
                  "eventId": "64d09f0395c974611afd9266",
                  "userId": "64cb73d348b75fc7f7c3eead",
                  "description": "haldi description",
                  "date": "2023-07-05T12:34:56Z",
                  "venue": "test venue",
                  "startTime": "10am",
                  "endTime": "11am",
                  "city": "Ahmedabad"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "422": {
            "description": "Validation Error"
          },
          "409": {
            "description": "Function already exists (duplicate name)"
          },
          "404": {
            "description": "[Icon not found, Event not found, User not found]"
          },
          "400": {
            "description": "Event id required"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/function/{functionId}": {
      "put": {
        "summary": "edit a function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function that is to be edited"
          },
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "iconId": {
                    "type": "string"
                  },
                  "eventId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "venue": {
                    "type": "string"
                  },
                  "startTime": {
                    "type": "string"
                  },
                  "endTime": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Haldi",
                "iconId": "64c7bb85fb7a6973b490790a",
                "eventId": "64d09f0395c974611afd9266",
                "userId": "64cb73d348b75fc7f7c3eead",
                "description": "haldi description",
                "date": "2023-07-05T12:34:56Z",
                "venue": "test venue",
                "startTime": "10am",
                "endTime": "11am",
                "city": "Ahmedabad"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "422": {
            "description": "Validation Error"
          },
          "409": {
            "description": "Function already exists (duplicate name)"
          },
          "404": {
            "description": "[Icon not found, Event not found, User not found]"
          },
          "400": {
            "description": "Event id required"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/function/getNames": {
      "get": {
        "summary": "Get name of all the functions in an event",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which function names are to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/function/getAll": {
      "get": {
        "summary": "Get all the functions in an event",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event from which functions are to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/function/get/{functionId}": {
      "get": {
        "summary": "Get function by id",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function which is to be retrieved"
          },
        ],
        "responses": {
          "200": {
            "description": "Success response"
          },
        }
      }
    },
    "/function/delete/{functionId}": {
      "delete": {
        "summary": "Delete a function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function that is to be deleted"
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the event to which the function belongs to"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the user who has executed the request"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/function/delete/{functionId}/guest": {
      "delete": {
        "summary": "Remove a guest from the function",
        "tags": [
          "Function"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "functionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the function "
          },
          {
            "in": "query",
            "name": "guestId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the guest which is to be removed from the function"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/icon/upload": {
      "post": {
        "summary": "Upload an icon",
        "tags": [
          "Icon"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "the file containing an icon"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon"
                  }
                }
              },
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          },
          "400": {
            "description": "[Icon required, template type should be png or svg]"
          },
          "422": {
            "description": "Validation"
          }
        }
      }
    },
    "/icon/getAll": {
      "get": {
        "summary": "Get all the icons",
        "tags": [
          "Icon"
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/icon/delete/{iconId}": {
      "delete": {
        "summary": "Delete an icon",
        "tags": [
          "Icon"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "iconId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the icon which is to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/user/addGuest": {
      "post": {
        "summary": "Add a guest user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name of the guest user"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the guest user"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the guest user (male/female)"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags related to the guest"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the user"
                  },
                  "meals": {
                    "type": "string",
                    "description": "Meal preference of the user"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "Id of the event in which the guest user is added"
                  },
                  "functionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Ids of the functions the guest user is invited to"
                  },
                  "friendsAndFamily": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "First name of the guest user"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last name of the guest user"
                        },
                        "gender": {
                          "type": "string",
                          "description": "Gender of the guest user (male/female)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Tags related to the guest"
                        },
                        "contactNo": {
                          "type": "number",
                          "description": "Contact number of the user"
                        },
                        "meals": {
                          "type": "string",
                          "description": "Meal preference of the user"
                        },
                        "functionIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Ids of the functions the guest user is invited to"
                        }
                      },
                      "description": "Friends and family of the guest user"
                    }
                  }
                }
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "gender": "male",
                "eventId": "event123",
                "tags": [
                  "VIP",
                  "SpecialGuest"
                ],
                "contactNo": 1234567890,
                "meals": "Vegetarian",
                "functionIds": [
                  "function123",
                  "function456"
                ],
                "friendsAndFamily": [
                  {
                    "firstName": "Jane",
                    "lastName": "Doe",
                    "gender": "female",
                    "tags": [
                      "Family"
                    ],
                    "contactNo": 9876543210,
                    "meals": "Non-Vegetarian",
                    "functionIds": [
                      "function123"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/user/addAdmin": {
      "post": {
        "summary": "Add an admin user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name of the admin"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the admin"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the admin male/female"
                  },
                  "contactNo": {
                    "type": "number",
                    "description": "Contact number of the admin"
                  },
                  "eventId": {
                    "type": "string",
                    "description": "Id of the event in which the admin user is to be added"
                  }
                }
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "gender": "male",
                "contactNo": 1234567890,
                "eventId": "event123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/template/upload": {
      "post": {
        "summary": "Upload an invitation template",
        "tags": [
          "Invitation template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "invitationTemplate": {
                    "type": "string",
                    "format": "binary",
                    "description": "File containing the template (png/svg)"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The id of the user executing the request"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags related to the template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucess response"
          },
          "400": {
            "description": "[Template required, Template type should be png/svg"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/template/getAll": {
      "get": {
        "summary": "Get all templates",
        "tags": [
          "Invitation template"
        ],
        "responses": {
          "200": {
            "description": "Success response"
          }
        }
      }
    },
    "/template/delete/{templateId}": {
      "delete": {
        "summary": "Delete a template",
        "tags": [
          "Invitation template"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "schema": {
              "type": "string",
            },
            "required": true,
            "description": "The id of the template that is to be deleted"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The id of the user trying to execute the request"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess response"
          },
          "400": {
            "description": "Template not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    }
  }
}