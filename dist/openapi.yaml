openapi: 3.0.3
info:
  title: Violette weddings
  description: Violette weddings apis
  version: 1.0.0
security:
  - bearerAuth: []
paths:
  /guest-list:
    post:
      summary: Add a new primary guest along with optional sub-guests to a specified event
      description: This endpoint allows the addition of a new primary guest to the event, with the option to include multiple sub-guests. Ensure that all required guest details are provided in the request payload.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAddGuestPayload'
      responses:
        '200':
          description: Success response indicating the guest was added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "New guest added successfully."
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update a primary guest and their associated sub-guests
      description: Modifies the details of a specified primary guest, including any associated sub-guests, ensuring all related information is synchronized.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchGuestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guest updated successfully.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve all guests for a specific event
      description: Fetches the complete list of guests associated with the specified event, providing details about each guest.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: eventId
          schema:
            type: string
          required: true
          description: Unique identifier for the event whose guests are to be retrieved.
      responses:
        '200':
          description: Successfully retrieved the list of guests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestsResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/move-sub-guests:
    post:
      summary: Transfer sub-guests from one primary guest to another designated primary guest
      description: This endpoint allows the transfer of sub-guests from one primary guest to another. The request should specify the source primary guest and the target primary guest to ensure correct grouping of sub-guests.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IMoveSubGuestPayload'
      responses:
        '200':
          description: Success response indicating that the sub-guests were moved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guest successfully moved to another group'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/move-primary-guest:
    post:
      summary: Relocate a primary guest to a different group
      description: This endpoint allows the relocation of a primary guest from their current group to another specified group. The request must include the details of the new group to which the guest will be moved.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IMovePrimaryGuestPayload'
      responses:
        '200':
          description: Success response confirming that the primary guest has been moved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Primary guest successfully moved.'
                  independentPrimaryGuests:
                    type: array
                    items:
                      type: string
                      format: ObjectId
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/guests:
    patch:
      summary: Update multiple primary guests and their associated sub-guests
      description: Modifies the details of an array of primary guests, including their related sub-guests, ensuring all information is accurately synchronized for each guest.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchGuestPayloadArray'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guests updated successfully.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/edit-cell:
    patch:
      summary: Update a single guest's details
      description: Modifies the information of a specific guest object, allowing updates to various attributes while ensuring data integrity.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchGuestCellPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guest updated successfully.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/{guestId}:
    get:
      summary: Retrieve details of a specific guest
      description: Fetches detailed information about a particular guest. If the guest is a primary guest, the response will also include the details of any associated sub-guests.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: guestId
          schema:
            type: string
          required: true
          description: Unique identifier for the guest whose details are to be retrieved.
      responses:
        '200':
          description: Successfully retrieved guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete guests based on provided IDs
      description: Removes specified guests from the guest list. If the guest being deleted is a primary guest and a `newPrimaryGuestId` is provided, that ID will be set as the new primary guest. Additionally, if a `subGuestToKeep` is specified, only that particular sub-guest will remain, while all other sub-guests will be deleted.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: guestId
          schema:
            type: string
            format: ObjectId
          required: true
          description: ID of the guest to delete
        - in: query
          name: newPrimaryGuestId
          schema:
            type: string
            format: ObjectId
          description: New primary guest ID if reassigning sub-guests
        - in: query
          name: subGuestToKeep
          schema:
            type: array
            items:
              type: string
              format: objectId
          description: List of sub-guest IDs to keep after deletion
      responses:
        '200':
          description: Guests successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guest successfully deleted.'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/send-invite:
    post:
      summary: Send invitations to all guests of a specified event
      description: Triggers the sending of invitations to all guests associated with the provided event ID. This ensures that all attendees receive their invitations in a timely manner.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  example: "64a51e6a4f1a2d63f7d25c9b"
      responses:
        '200':
          description: Invitations successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invitations successfully sent.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/import-contacts:
    post:
      summary: Import guests from a contacts file
      description: Allows users to upload a VCF (.vcf) file containing contact information to create guest entries for an event. The system processes the file and imports the contacts as guests.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                contacts:
                  type: string
                  format: binary
                  description: VCF file containing contacts to be imported
      responses:
        '200':
          description: Contacts imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Contacts imported successfully.'
                  contactsCount:
                    type: number
                    example: 10
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/import-guest-list:
    post:
      summary: Import guests from a CSV file
      description: Allows users to upload a CSV file to import guests into the event. This operation will overwrite the current guest list with the entries from the uploaded file.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              format: binary 
      responses:
        '200':
          description: Guests imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'CSV imported successfully'
                  independentSubGuests:
                    type: array
                    items:
                      type: string
                      example: "64a51e6a4f1a2d63f7d25c9b"
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/export-guest-list:
    post:
      summary: Export the guest list in CSV format
      description: This endpoint allows users to export the guest list for a specified event in CSV format. Users must provide an array of guest IDs to generate the export.
      tags:
        - Guest List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example:
                - "66f27de4eb8b262925cff11b"
                - "66f27de4eb8b262925cff11c"
      responses:
        '200':
          description: Export successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Export successful'
                  fileName:
                    type: string
                    example: "guestList_1727343502829.csv"
        '500':
          $ref: '#/components/responses/500'
  /guest-list/{guestId}/rsvp:
    get:
      summary: Get RSVP status of a guest
      description: Retrieve the RSVP status of a guest for different functions.
      tags:
        - Guest List
      parameters:
        - name: guestId
          in: path
          required: true
          description: The unique identifier of the guest
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved RSVP status
          content:
            application/json:
              schema:
                type: object
                properties:
                  rsvpDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: Unique identifier for the RSVP record
                        function:
                          $ref: '#/components/schemas/Function'
                        rsvp:
                          type: string
                          description: The RSVP status of the guest for the function
                          example: Yes
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /guest-list/rsvp:
    patch:
      summary: Update RSVP status for guests
      description: Update the RSVP status for one or more guests.
      tags:
        - Guest List
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  functionRef:
                    type: string
                    description: The unique identifier for the function in which the guest RSVP is being updated.
                  rsvp:
                    type: string
                    description: The new RSVP status for the function.
              example:
                - functionRef: "66ebdad07cd2bf56d488449c"
                  rsvp: "Yes"
                - functionRef: "66ebdad07cd2bf56d488449d"
                  rsvp: "No"
      responses:
        '200':
          description: RSVP status successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: RSVP status successfully updated.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
  /hotel:
    post:
      summary: Add a hotel at the company level
      description: >-
        This endpoint allows a company to add a new hotel to its profile. Only
        the company that adds the hotel can use it for its events.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAddHotelPayload'
      responses:
        '200':
          description: Hotel added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hotel successfully added.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Edit a hotel at the company level
      description: >-
        This endpoint allows a company to update the details of an existing
        hotel in its profile. Only the company that added the hotel can modify
        it.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchHotelPayload'
      responses:
        '200':
          description: Hotel updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hotel successfully updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve a list of hotels associated with a specific company
      description: >-
        This endpoint fetches all hotels linked to the provided company ID. Only
        hotels that belong to the requesting company will be returned.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: companyId
          schema:
            type: string
            format: ObjectId
          required: true
          description: >-
            The unique identifier of the company whose hotel details are to be
            fetched.
      responses:
        '200':
          description: Successfully retrieved the list of hotels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HotelsResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /hotel/{hotelId}:
    delete:
      summary: Delete a hotel by its ID
      description: >-
        This endpoint allows for the deletion of a hotel. If the hotel is
        associated with future events, the response will include details about
        the events and the guests. To permanently delete the hotel, guests must
        be moved to another accommodation, or delete the hotel without
        reloacting the guests.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the hotel that needs to be deleted.
        - in: query
          name: forceDelete
          schema:
            type: boolean
          description: >-
            Indicates whether to forcefully delete the hotel, bypassing checks
            for associated guests or events.
      responses:
        '200':
          description: Hotel deletion successful, with possible guest/event details
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UniqueGuestsByEvents'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Hotel successfully deleted
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve details of a specific hotel
      description: >-
        This endpoint returns comprehensive information about the hotel
        identified by the provided hotel ID.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the hotel whose details are to be fetched.
      responses:
        '200':
          description: Successfully retrieved hotel details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HotelResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /hotel/event:
    patch:
      summary: Update hotel details associated with a specific event
      tags:
        - Hotel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAddHotelToEventPayload'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hotel details successfully updated.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a hotel to an event
      description: >-
        This endpoint allows the addition of a specified hotel to a particular
        event. The hotel must be associated with the company managing the event.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAddHotelToEventPayload'
      responses:
        '200':
          description: Hotel successfully added to the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hotel successfully added to the event.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /hotel/{hotelId}/event:
    delete:
      summary: Remove a hotel from an event
      description: >
        This endpoint allows you to remove a hotel from a specific event. 

        If there are guests currently allocated to this hotel, they must be
        reallocated 

        to a different accommodation before deleting the hotel. 

        If the `forceDelete` flag is provided, the hotel can be deleted without 

        reallocating guests, leaving them without accommodation.
      tags:
        - Hotel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: hotelId
          schema:
            type: string
            format: ObjectId
          required: true
          description: ID of the hotel to be removed from the event
        - in: query
          name: eventId
          schema:
            type: string
            format: ObjectId
          required: true
          description: ID of the event from which the hotel is to be deleted
        - in: query
          name: forceDelete
          schema:
            type: string
          description: >-
            Optional flag to force delete the hotel, leaving guests without
            accommodation
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UniqueGuestsByEvent'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Hotel successfully removed from the event.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /meal:
    post:
      summary: Add a new meal type
      description: |
        This endpoint allows you to create a new meal type in the system. 
        You must provide a `name` for the meal (e.g., "Veg") and a `color` 
        representing the meal type visually (e.g., "Green").
      tags:
        - Meal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                  example: Veg
                color:
                  type: string
                  example: Green
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meal successfully created.
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /meal/{mealId}:
    delete:
      summary: Remove a meal from the system using its ID
      description: >-
        This endpoint allows you to delete a meal by specifying the unique
        `mealId`.
      tags:
        - Meal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: mealId
          schema:
            type: string
            format: ObjectId
          required: true
          description: Unique identifier of the meal to be deleted from the system.
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meal successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /plan:
    post:
      summary: Create a new subscription plan
      description: >-
        This endpoint allows the user to create a new subscription plan with
        specific attributes, such as plan name, guest capacity, function limits,
        storage capacity, and price. The plan will be associated with the
        company and can be used to manage event-related services.
      tags:
        - Plan
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPlanType'
      responses:
        '200':
          description: Successful creation of the plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Plan successfully created.
                  plan:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 66f52228e5fbfdff9cf4e477
                        description: Unique identifier for the newly created plan.
                      planName:
                        type: string
                        example: Silver
                        description: The name assigned to the subscription plan.
                      numberOfGuests:
                        type: integer
                        example: 1500
                        description: Maximum number of guests included in the plan.
                      numberOfFunctions:
                        type: integer
                        example: 15
                        description: Maximum number of functions allowed under the plan.
                      storageCapacity:
                        type: string
                        example: 2TB
                        description: Allocated storage capacity for the plan.
                      price:
                        $ref: '#/components/schemas/Price'
                        description: Details about the pricing of the plan.
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /plan/{planId}:
    delete:
      summary: Delete a subscription plan by its ID
      description: >-
        This endpoint allows the user to delete a specific subscription plan
        using its unique identifier (`planId`). Only plans that are not
        currently associated with any active subscriptions or events can be
        deleted. The user must provide the `planId` in the request path to
        identify which plan needs to be removed.
      tags:
        - Plan
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: planId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the plan to be deleted.
      responses:
        '200':
          description: Plan successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Plan has been successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /role:
    post:
      summary: Create a new role with specific permissions
      description: >-
        This endpoint allows the user to create a new role by specifying a name
        and a set of permissions. Each role defines a collection of permissions
        that dictate what actions the role holder can perform within the
        application. The user must provide a list of permission IDs and a unique
        role name in the request body.
      tags:
        - Role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - permissions
                - name
              properties:
                permissions:
                  type: array
                  items:
                    type: string
                    format: ObjectId
                  example:
                    - 66f27de4eb8b262925cff11b
                    - 66f27de4eb8b262925cff11c
                  description: A list of permission IDs to be assigned to the new role.
                name:
                  type: string
                  example: Groom
                  description: >-
                    The name of the new role to be created. It should be unique
                    within the organization.
      responses:
        '200':
          description: Role successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Role has been created successfully.
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /room:
    post:
      summary: Create a new global room type
      description: >-
        This endpoint allows the creation of a new room type at the global
        level. The newly created room type will be available for use in various
        events and accommodations across the platform. The user must provide the
        necessary details, such as room name and configuration, in the request
        body. This action is intended for administrative use to define standard
        room types.
      tags:
        - Room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IRoom'
      responses:
        '200':
          description: Room type successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Room type has been successfully created.
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update a global room type
      description: >-
        This endpoint allows for the modification of an existing room type at
        the global level. The user must provide the room ID and the updated
        details in the request body. This is typically used to update the
        properties of a room type such as name, amenities, or capacity. Only
        users with the necessary permissions can perform this action.
      tags:
        - Room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchRoomTypePayload'
      responses:
        '200':
          description: Room type successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Room type has been successfully updated.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve all available room types
      description: >-
        This endpoint provides a list of all room types available at the global
        level. It returns details such as room names, amenities, capacity, and
        other relevant information. Users can use this endpoint to view and
        select different room types for their events or accommodations. Access
        to this endpoint requires appropriate authorization.
      tags:
        - Room
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of room types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomTypesResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /room/{roomId}:
    delete:
      summary: Delete a room by its Id
      description: >-
        This endpoint allows users to delete a specific room from the system
        using its unique identifier (`roomId`). If the room type is currently
        associated with any future events, the user must reallocate the guests
        accommodated in the room. Alternatively, the user can choose to force
        delete the room, which will leave the guests without accommodation.
      tags:
        - Room
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the room to be deleted.
        - in: query
          name: forceDelete
          schema:
            type: string
          description: >-
            Flag indicating whether to force delete the room, even if it is
            associated with future events, leaving guests without accommodation.
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UniqueGuestsByEvents'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room successfully deleted
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve details of a specific room
      description: >-
        This endpoint allows users to fetch detailed information about a
        particular room using its unique identifier (`roomId`). The response
        includes room attributes such as name, type, capacity, and amenities. It
        also indicates if the room has been marked as deleted. Access to this
        endpoint requires appropriate authorization.
      tags:
        - Room
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          schema:
            type: string
            format: ObjectId
          required: true
          description: >-
            The unique identifier of the room whose details need to be
            retrieved.
      responses:
        '200':
          description: Room details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  room:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/IRoom'
                      - type: object
                        properties:
                          isDeleted:
                            type: boolean
                            example: false
                            description: Indicates if the room is marked as deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /room/event:
    post:
      summary: Add a room type to an event
      description: >-
        This endpoint allows users to associate a specific room type with an
        event. The room type is added to the list of available accommodations
        for the event, making it accessible for guest allocations and bookings.
        The request must include details such as the room type, the hotel it
        belongs to, and the event it is being added to.
      tags:
        - Room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAddRoomToEventPayload'
      responses:
        '200':
          description: Room added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Room successfully added to the event.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Edit a room type in an event
      description: >-
        This endpoint allows users to modify the details of a room type
        associated with a specific event. Users can update information such as
        the quantity or features of the room. If the number of rooms is reduced
        and existing guest allocations exceed the new quantity, users must
        reallocate the affected guests. Alternatively, users can choose to force
        delete these accommodations using the `forceDelete` option.
      tags:
        - Room
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: forceDelete
          schema:
            type: string
            description: >-
              Whether to force delete accommodations for excess guests if the
              room quantity is reduced.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPatchEventRoomTypePayload'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UniqueGuestsByEvent'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room type successfully updated in the event.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a room type from an event
      description: >-
        This endpoint allows users to remove a specific room type from an event.
        If there are guests allocated to this room, users must either reallocate
        them to another room or choose to force delete the room type along with
        its guest allocations using the `forceDelete` option.
      tags:
        - Room
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: eventRoomRef
          schema:
            type: string
            format: ObjectId
          required: true
          description: Reference ID of the room type to be deleted from the event.
        - in: query
          name: forceDelete
          schema:
            type: string
          description: >-
            Indicates whether to force delete the room type along with any
            associated guest allocations.
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/UniqueGuestsByEvent'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Room type successfully deleted from the event.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /tag:
    post:
      summary: Create a new tag
      description: >-
        This endpoint allows users to create a new tag for categorization or
        identification purposes. Tags can be associated with specific events or
        created at the global level to help organize and identify relevant
        content easily.
      tags:
        - Tag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ITag'
      responses:
        '200':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag created successfully.
                  tag:
                    type: object
                    description: >-
                      Schema representing a tag used for categorization or
                      identification.
                    required:
                      - _id
                      - name
                      - color
                    properties:
                      _id:
                        type: string
                        format: ObjectId
                        example: 66f558aaddf1449a32dcd4b8
                        description: Unique identifier for the tag.
                      name:
                        type: string
                        example: test 2
                        description: The name of the tag.
                      color:
                        type: string
                        example: red
                        description: The color associated with the tag.
                      eventId:
                        type: string
                        example: 66f119beb026c0eb71d5b5e4
                        description: Event ID of the event if the tag is event-specific.
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /tag/{tagId}:
    delete:
      summary: Delete a tag by its unique identifier
      description: >-
        This endpoint allows users to delete a specific tag by providing its
        unique identifier (ID). Deleting a tag will remove it from all
        associated events if applicable, and it cannot be undone.
      tags:
        - Tag
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tagId
          schema:
            type: string
            format: ObjectId
          required: true
          description: Unique identifier of the tag that needs to be deleted.
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag deleted successfully.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /task-list:
    post:
      summary: Create a new task for a specific event
      description: >-
        This endpoint allows users to create a new task associated with a
        specific event. The task will include details such as the task name, due
        date, and any additional notes.
      tags:
        - Task List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICreateTaskPayload'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task created successfully.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve tasks for a specific event
      description: >-
        This endpoint fetches all tasks associated with a particular event.
        Users can filter tasks by providing the function ID to narrow down the
        results.
      tags:
        - Task List
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: eventId
          schema:
            type: string
            format: ObjectId
          description: >-
            The unique identifier of the event for which tasks are to be
            retrieved
          required: true
        - in: query
          name: functionId
          schema:
            type: string
            format: ObjectId
          description: (Optional) The unique identifier of the function to filter the tasks
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /task-list/checkList:
    patch:
      summary: Update the status of a checklist item
      description: >-
        This endpoint allows users to modify the status of a specific checklist
        item associated with a task. Users can mark the checklist item as
        complete or incomplete, providing an updated status to help track
        progress on tasks effectively.
      tags:
        - Task List
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUpdateCheckListStatus'
      responses:
        '200':
          description: Checklist status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Checklist status changed successfully.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /task-list/{taskId}:
    delete:
      summary: Delete a task by its ID
      description: >-
        This endpoint allows users to delete a specific task from the task list
        using its unique identifier (taskId). Deleting a task will remove it
        permanently from the system, ensuring that the task list remains up to
        date.
      tags:
        - Task List
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the task that needs to be deleted
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve details of a specific task
      description: >-
        This endpoint fetches the details of a task identified by its unique
        task ID. It allows users to view all relevant information about the
        specified task.
      tags:
        - Task List
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
            format: ObjectId
          description: The unique identifier of the task whose details are to be retrieved
          required: true
      responses:
        '200':
          description: Task details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Edit a task by its ID
      description: >-
        This endpoint allows users to modify an existing task using its unique
        identifier. Users can update details such as the task name, due date,
        status, and any additional notes. A successful update will return a
        confirmation message.
      tags:
        - Task List
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
            format: ObjectId
          required: true
          description: Unique identifier of the task to be modified.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IBaseTaskPayload'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task updated successfully.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'  
  /accommodation/move-guests:
    post:
      summary: Move guest from one accommodation to another
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentAccommodationId
                - newAccommodationId
                - guestIds
                - checkInDate
                - checkOutDate
              properties:
                currentAccommodationId:
                  type: string
                  description: >-
                    The id of the accommodation from which the guest has to be
                    moved.
                  example: 66ed36bc01b9f930d23d02f8
                newAccommodationId:
                  type: string
                  description: The id of the new accommodation.
                  example: 66ebff5fa21050521623928c
                guestIds:
                  type: array
                  description: The id of the new accommodation.
                  example:
                    - 66ebdad07cd2bf56d488449c
                    - 66e3f1c27679a1a4f0076cdb
                  items:
                    type: string
                checkInDate:
                  type: string
                  description: >-
                    The check in date for the new accommodation (ISO 8601
                    format)
                  format: date-time
                checkOutDate:
                  type: string
                  description: >-
                    The check out date for the new accommodation (ISO 8601
                    format)
                  format: date-time
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: Message displayed after api is successfully executed
                    example: >-
                      Guests have been successfully moved to the new
                      accommodation.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation:
    post:
      summary: Add guest to accommodation from guest list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
                - guestIds
                - companyId
                - roomRef
                - hotelRef
                - bookingDetails
              properties:
                eventId:
                  type: string
                  format: objectId
                  description: The ID of the event.
                  example: 66e189a48dacf4f20d7e51d2
                guestIds:
                  type: array
                  items:
                    type: string
                    format: objectId
                  description: Array of guest IDs to be added to the accommodation.
                  example:
                    - 66e3f1c27679a1a4f0076ce2
                companyId:
                  type: string
                  format: objectId
                  description: The company profile ID associated with the booking.
                  example: 66e1839f04bcf8e6974a4bdf
                roomRef:
                  type: string
                  format: objectId
                  description: The ID of the room where guests will be accommodated.
                  example: 66e1839f04bcq8e6974a8hjf
                hotelRef:
                  type: string
                  format: objectId
                  description: The ID of the hotel where guests will be accommodated.
                  example: 66e1700f04bef8e6674a4fvg
                bookingDetails:
                  type: object
                  required:
                    - checkInDate
                    - checkOutDate
                  description: Details of the booking.
                  properties:
                    checkInDate:
                      type: string
                      format: date-time
                      description: The check-in date. (ISO 8601 format)
                    checkOutDate:
                      type: string
                      format: date-time
                      description: The check-out date. (ISO 8601 format)
                    checkInTime:
                      type: string
                      format: time
                      description: (Optional) The check in time of the guests
                      example: '13:00'
                    checkOutTime:
                      type: string
                      format: time
                      description: (Optional) The check out time of the guests
                      example: '10:00'
                accommodationId:
                  type: string
                  format: objectId
                  description: >-
                    (Optional) The ID of the accommodation, if already
                    available.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: Message displayed after api is successfully executed
                    example: Guests accommodated successfully.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
    get:
      summary: Get accommodations
      parameters:
        - name: eventId
          in: query
          required: true
          description: The id of the event from which accommodations are to be fetched
          schema:
            type: string
            format: objectId
            example: 60b8d8a7f1a2b40f30b5b60e
        - name: guestId
          in: query
          required: false
          description: (Optional) The id of the guest whose accommodation is to be fetched
          schema:
            type: string
            format: objectId
            example: 60b8d8a7f1a2b40f30b5b62e
      responses:
        '200':
          description: Successfully retrieved accommodation details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accommodations:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: objectId
                          description: The unique ID of the accommodation.
                          example: 66ed44851f6853179b4d90f4
                        guests:
                          type: array
                          items:
                            type: array
                            items:
                              type: string
                              format: objectId
                              description: >-
                                Array of guest IDs associated with the
                                accommodation.
                              example: 66e3f1c27679a1a4f0076cdb
                        checkInTime:
                          type: string
                          description: The time when the guest can check in.
                          example: 12 PM
                        checkOutTime:
                          type: string
                          description: The time when the guest must check out.
                          example: 1 PM
                        checkInDate:
                          type: string
                          format: date-time
                          description: The date when the guest checks in.
                          example: '2024-09-19T18:04:55+05:30'
                        checkOutDate:
                          type: string
                          format: date-time
                          description: The date when the guest checks out.
                          example: '2024-09-24T12:04:55+05:30'
                        totalNights:
                          type: integer
                          description: Total number of nights booked.
                          example: 5
                        createdAt:
                          type: string
                          format: date-time
                          description: Timestamp when the accommodation record was created.
                          example: '2024-09-20T09:46:45.887Z'
                        updatedAt:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp when the accommodation record was last
                            updated.
                          example: '2024-09-23T07:47:02.434Z'
                        __v:
                          type: integer
                          description: Version key for the accommodation document.
                          example: 6
                        event:
                          type: string
                          format: objectId
                          description: The ID of the associated event.
                          example: 66e189a48dacf4f20d7e51d2
                        id:
                          type: string
                          format: objectId
                          description: Legacy ID of the accommodation.
                          example: 66ed44851f6853179b4d90f4
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation/change-hotel:
    post:
      summary: Change Hotel of the accommodation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accommodationId
                - newHotelRef
                - newRoomRef
              properties:
                accommodationId:
                  type: string
                  format: objectId
                  description: The ID of the accommodation that needs to be changed.
                  example: 66ed44851f6853179b4d90f4
                newHotelRef:
                  type: string
                  format: objectId
                  description: The ID of the new hotel reference.
                  example: 66f11af7b026c0eb71d5b5f6
                newRoomRef:
                  type: string
                  format: objectId
                  description: The ID of the new room reference in the hotel.
                  example: 66f119beb026c0eb71d5b5e4
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: Message displayed after api is successfully executed
                    example: >-
                      The hotel for the accommodation has been successfully
                      updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation/change-room-type:
    post:
      summary: Change the room type of accommodation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accommodationId
                - newRoomRef
              properties:
                accommodationId:
                  type: string
                  format: objectId
                  description: >-
                    The ID of the accommodation that needs to have its room type
                    changed.
                  example: 60b8d8a7f1a2b40f30b5b60e
                newRoomRef:
                  type: string
                  format: objectId
                  description: >-
                    The ID of the new room reference to be assigned to the
                    accommodation.
                  example: 60b8d8a7f1a2b40f30b5b60f
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: Message displayed after api is successfully executed
                    example: >-
                      Room type for the accommodation has been successfully
                      updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation/edit-guest-accommodation:
    post:
      summary: Edit guest check-in-out dates inside accommodation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accommodationId
                - guestId
                - checkInDate
                - checkOutDate
              properties:
                accommodationId:
                  type: string
                  format: objectId
                  description: The ID of the accommodation where the guest is staying.
                  example: 60b8d8a7f1a2b40f30b5b60e
                guestId:
                  type: string
                  format: objectId
                  description: >-
                    The ID of the guest whose accommodation details are being
                    edited.
                  example: 60b8d8a7f1a2b40f30b5b60f
                checkInDate:
                  type: string
                  format: date-time
                  description: The date when the guest checks in (ISO 8601 format).
                checkOutDate:
                  type: string
                  format: date-time
                  description: The date when the guest checks out (ISO 8601 format).
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: Message displayed after api is successfully executed
                    example: The guest's accommodation has been successfully updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation/remove-guest/{accommodationId}:
    delete:
      summary: Remove guest from a accommodation
      parameters:
        - name: accommodationId
          in: path
          required: true
          description: The id of the accommodation from which the guest is to be removed
          schema:
            type: string
            format: objectId
            example: 60b8d8a7f1a2b40f30b5b60e
        - name: guestId
          in: query
          required: true
          description: The id of the guest to be removed
          schema:
            type: string
            format: objectId
            example: 60b8d8a7f1a2b40f30b5b62e
      responses:
        '200':
          description: Successfully removed guest from accommodation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Guest has been successfully removed from the
                      accommodation.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /accommodation/{accommodationId}:
    delete:
      summary: Remove guest from a accommodation
      parameters:
        - name: accommodationId
          in: path
          required: true
          description: The id of the accommodation to be deleted
          schema:
            type: string
            format: objectId
            example: 60b8d8a7f1a2b40f30b5b60e
        - name: forceDelete
          in: query
          required: false
          description: >-
            (Optional) Whether or not to force delete accommodation with guest
            (Not case sensitive).
          schema:
            type: string
            description: The value is not case sensitive
            enum:
              - 'Yes'
              - 'No'
            format: objectId
            example: 'Yes'
      responses:
        '200':
          description: Successfully Deleted accommodation.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Accommodation successfully deleted.
                  - type: object
                    properties:
                      guestList:
                        type: array
                        items:
                          type: object
                          properties:
                            firstName:
                              type: string
                              example: John
                            lastName:
                              type: string
                              example: Doe
                            contactNumber:
                              type: integer
                              example: 1234567890
                            gender:
                              type: string
                              enum:
                                - male
                                - female
                                - other
                              example: male
                            avatar:
                              type: string
                              format: uri
                              example: https://example.com/avatar.jpg
                            functionDetails:
                              type: array
                              items:
                                type: object
                                properties:
                                  functionName:
                                    type: string
                                    example: Best Man
                                  functionDescription:
                                    type: string
                                    example: Responsible for the best man speech.
                            tags:
                              type: array
                              items:
                                type: string
                                format: objectId
                                example: 60b8d8a7f1a2b40f30b5b60e
                            subGuests:
                              type: array
                              items:
                                type: object
                                properties:
                                  firstName:
                                    type: string
                                    example: Jane
                                  lastName:
                                    type: string
                                    example: Doe
                            primaryGuest:
                              type: string
                              format: objectId
                              example: 60b8d8a7f1a2b40f30b5b60e
                            meal:
                              type: string
                              format: objectId
                              example: 60b8d8a7f1a2b40f30b5b60f
                            user:
                              type: string
                              format: objectId
                              example: 60b8d8a7f1a2b40f30b5b60g
                            event:
                              type: string
                              format: objectId
                              example: 60b8d8a7f1a2b40f30b5b60h
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Accommodation
  /attachments/upload-image:
    post:
      summary: Upload attachments to a task.
      description: >-
        Uploads attachments to a specified task if the task exists. If no task
        ID is provided, it uploads attachments without associating them with a
        task.
      operationId: uploadTaskAttachments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - taskAttachments
              properties:
                taskId:
                  type: string
                  format: objectId
                  description: >-
                    (Optional) The ID of the task to which the attachments
                    should be added.
                  example: 60b8d8a7f1a2b40f30b5b60e
                taskAttachments:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Files to be uploaded as attachments.
      responses:
        '200':
          description: Attachments uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Attachments uploaded successfully.
        '400':
          description: Bad request - invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Maximum number of attachments exceeded.
        '404':
          description: Task not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Task not found.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred.
      tags:
        - Attachments
  /auth/create-user-details:
    post:
      summary: Create details of a existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user.
                  example: John
                lastName:
                  type: string
                  description: The last name of the user.
                  example: Doe
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                  example: john.doe@example.com
              required:
                - firstName
                - lastName
                - email
      responses:
        '200':
          description: OTP details set successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    type: string
                    description: The generated OTP signature.
                    example: abcdef1234567890
                  publicKey:
                    type: string
                    description: The public key associated with the OTP.
                    example: publicKeyExample12345
                  otpExpiration:
                    type: string
                    format: date-time
                    description: The expiration time of the OTP in ISO 8601 format.
                    example: '2024-09-24T12:00:00Z'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Auth
  /auth/create-password:
    post:
      summary: Create password for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contactNumber:
                  type: integer
                  example: 1234567890
                  description: User's contact number.
                password:
                  type: string
                  format: password
                  description: User's password.
                  example: P@ssword123
                confirmPassword:
                  type: string
                  format: password
                  description: >-
                    Confirmation of the password, should match the          
                    `password` field.
                  example: P@ssword123
                publicKey:
                  type: string
                  description: User's public key in PEM or DER format.
                  example: '-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----'
                signature:
                  type: string
                  description: Signature to verify the request authenticity.
                  example: dGVzdHNpZ25hdHVyZQ==
              required:
                - contactNumber
                - password
                - confirmPassword
                - publicKey
                - signature
      responses:
        '200':
          description: Password created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password created
                  token:
                    type: string
                    description: >-
                      JWT access token provided after successful password
                      creation.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - Auth
  /auth/forgot-password/{contactNumber}:
    post:
      summary: Api to reset password if user forgets their passowrd
      parameters:
        - name: contactNumber
          in: path
          required: true
          description: Contact number of the user whose passoword is to changed
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
                - publicKey
                - signature
              properties:
                password:
                  type: string
                  format: password
                  description: New user password.
                  example: NewP@ssword123
                confirmPassword:
                  type: string
                  format: password
                  description: >-
                    Confirmation of the new password, should match the          
                    `password` field.
                  example: NewP@ssword123
                publicKey:
                  type: string
                  description: User's public key for signature verification.
                  example: '-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----'
                signature:
                  type: string
                  description: Signature for the request authentication.
                  example: dGVzdHNpZ25hdHVyZQ==
      responses:
        '200':
          description: Password Changed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully.
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - Auth
  /auth/verify-otp/{contactNumber}:
    post:
      summary: Verify OTP for user
      parameters:
        - name: contactNumber
          in: path
          required: true
          description: contactNumber of the user whose otp is to be verified
          schema:
            type: string
            example: 9825606702
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  description: The OTP provided by the user.
                  example: '123456'
              required:
                - otp
      responses:
        '200':
          description: OTP Verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP Verified
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Auth
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contactNumber:
                  type: integer
                  description: User's contact number.
                  example: 1234567890
                password:
                  type: string
                  format: password
                  description: User's password for login.
                  example: P@ssword123
              required:
                - contactNumber
                - password
      responses:
        '200':
          description: Login successful. Returns user details and an access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      contactNumber:
                        type: integer
                        description: User's contact number.
                        example: 1234567890
                      email:
                        type: string
                        format: email
                        description: User's email address.
                        example: user@example.com
                      firstName:
                        type: string
                        description: User's first name.
                        example: John
                      lastName:
                        type: string
                        description: User's last name.
                        example: Doe
                      password:
                        type: string
                        format: password
                        description: User's password.
                        example: hashedPassword123
                      otp:
                        type: integer
                        description: OTP sent to the user.
                        example: 123456
                      isOtpVerified:
                        type: boolean
                        description: Whether the user has verified their OTP.
                        example: true
                      otpExpiration:
                        type: string
                        format: date-time
                        description: Expiration time of the OTP.
                        example: '2023-09-25T14:48:00.000Z'
                      eventDetails:
                        type: array
                        description: List of event details associated with the user.
                        items:
                          type: object
                          properties:
                            event:
                              type: string
                              description: ObjectId of the event.
                              example: 60d21b4667d0d8992e610c85
                            role:
                              type: string
                              description: >-
                                ObjectId representing the user's role in the
                                event.
                              example: 60d21b4667d0d8992e610c86
                            acceptedDocuments:
                              type: array
                              description: >-
                                List of ObjectIds of accepted documents for the
                                event.
                              items:
                                type: string
                                example: 60d21b4667d0d8992e610c87
                            rejectedDocuments:
                              type: array
                              description: >-
                                List of ObjectIds of rejected documents for the
                                event.
                              items:
                                type: string
                                example: 60d21b4667d0d8992e610c88
                            pendingDocuments:
                              type: array
                              description: >-
                                List of ObjectIds of pending documents for the
                                event.
                              items:
                                type: string
                                example: 60d21b4667d0d8992e610c89
                      partOf:
                        type: array
                        items:
                          type: object
                          description: >-
                            List of companies or organizations the user is part
                            of.
                      documents:
                        type: array
                        items:
                          type: string
                          description: List of document IDs associated with the user.
                          example: 60d21b4667d0d8992e610c85
                  accessToken:
                    type: string
                    description: JWT access token provided after successful login.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    description: JWT access token provided after successful login.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Auth
  /auth/refresh:
    post:
      summary: Refresh Access Token
      description: Refresh the access token using a valid refresh token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token used to get a new access token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The newly generated access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /auth/logout:
    post:
      summary: Logout and blacklist refresh token
      description: Logout the user by blacklisting the refresh token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to be blacklisted
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '500':
          $ref: '#/components/responses/500'
  /auth/verification-status/{contactNumber}:
    get:
      summary: Get user verification status.
      description: >-
        Checks if the user has verified their OTP and whether they have a
        password set based on their contact number.
      operationId: userVerificationStatus
      parameters:
        - name: contactNumber
          in: path
          required: true
          description: The contact number of the user to check verification status.
          schema:
            type: string
            example: '1234567890'
      responses:
        '200':
          description: Successfully retrieved verification status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Auth
  /auth/resend-otp/{contactNumber}:
    get:
      summary: Resend OTP
      description: >-
        Resends an OTP to the user based on their contact number and updates OTP
        verification status.
      parameters:
        - in: path
          name: contactNumber
          schema:
            type: string
            example: '1234567890'
          required: true
          description: The contact number of the user to resend OTP to.
      responses:
        '200':
          description: OTP resent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: OTP sent successfully
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Auth
        
  /category:
    post:
      summary: Add category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: John Weds Doe
                  description: The name of the category.
                eventId:
                  type: string
                  format: objectId
                  example: 507f1f77bcf86cd799439011
                  description: (Optional) The ID of the associated event.
      responses:
        '200':
          description: New category successfully created
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: New category successfully created.
      tags:
        - Category
    get:
      summary: Get categories
      parameters:
        - name: eventId
          in: query
          description: >-
            (Optional) Id of the event if event specific categories are to be
            fetched
          required: false
          schema:
            type: string
            format: objectId
      responses:
        '200':
          description: Successfully fetched categories
          content:
            application/json:
              schema:
                properties:
                  _id:
                    type: string
                    format: objectId
                    description: The id of the document
                    example: 66e189dc8dacf4f20d7e51dk
                  name:
                    type: string
                    description: The name of the category
                    example: Category 1
                  eventId:
                    type: string
                    format: objectId
                    description: >-
                      (Optional) Id of the event to which the category belongs
                      to
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Category
  /categories/{categoryId}:
    delete:
      summary: Delete a category
      description: >-
        Deletes a category by its ID. If the category is associated with an
        event, it will be removed from the event's categories.
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the category to be deleted.
      responses:
        '200':
          description: Category successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Category
  /codes/purchase:
    post:
      summary: Purchase a code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: string
                  format: objectId
                  example: 507f1f77bcf86cd799439011
                  description: The ID of the company associated with the purchase.
                eventPlan:
                  type: array
                  items:
                    type: object
                    properties:
                      planId:
                        type: string
                        format: objectId
                        example: 507f1f77bcf86cd799439012
                        description: The ID of the event plan.
                      discount:
                        type: string
                        example: 10%
                        description: (Optional) Discount applicable to the event plan.
                      quantity:
                        type: integer
                        example: 5
                        description: The number of codes to purchase for the event plan.
                      unitPrice:
                        type: object
                        properties:
                          currency:
                            type: string
                            example: USD
                            description: The currency of the price.
                          amount:
                            type: number
                            format: double
                            example: 100
                            description: The unit price of the event plan.
                      codes:
                        type: array
                        items:
                          type: string
                          format: objectId
                          example: 507f1f77bcf86cd799439015
                          description: >-
                            (Optional) An array of ObjectIds representing codes
                            associated with the event plan.
              required:
                - companyId
                - eventPlan
      responses:
        '200':
          description: Purchase successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Purchase successful
                  response:
                    type: object
                    properties:
                      <planName>:
                        type: array
                        description: The plan name key will be the name of the event type
                        items:
                          type: string
                          example: aafb89
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Codes
  /codes/redeem:
    post:
      summary: Redeem a promotional code
      description: >-
        Allows a user to redeem a promotional code. The code must be valid and
        not previously used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usedCode
              properties:
                usedCode:
                  type: string
                  example: F820CC
                  description: The promotional code to redeem.
      responses:
        '200':
          description: Code redeemed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Code redeemed Successfully
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Codes
  /codes/purchase/{companyId}:
    get:
      summary: Retrieve purchase codes for a company
      description: Fetches the purchase codes associated with a specified company ID.
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: The ID of the company for which to retrieve purchase codes.
      responses:
        '200':
          description: Successfully retrieved purchase codes
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        totalPrice:
                          type: object
                          properties:
                            amount:
                              type: number
                              format: double
                              example: 1800
                            currency:
                              type: string
                              example: INR
                        _id:
                          type: string
                          format: objectId
                          example: 66e188a2ca7f8e1974ed240c
                        company:
                          type: string
                          format: objectId
                          example: 66e1839f04bcf8e6974a4bdf
                        eventPlan:
                          type: array
                          items:
                            type: object
                            properties:
                              unitPrice:
                                type: object
                                properties:
                                  amount:
                                    type: number
                                    format: double
                                    example: 1000
                                  currency:
                                    type: string
                                    example: INR
                              planId:
                                type: string
                                format: objectId
                                example: 66bf3cd458c15bfaae59b34a
                              discount:
                                type: string
                                example: 10%
                              quantity:
                                type: integer
                                example: 2
                              codes:
                                type: array
                                items:
                                  type: string
                                  example: 66e188a2ca7f8e1974ed240f
                              _id:
                                type: string
                                format: objectId
                                example: 66e188a2ca7f8e1974ed240d
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Codes
  /codes/{companyId}:
    get:
      tags:
        - Codes
      summary: Get codes for a company
      description: >-
        Retrieve purchase codes and their associated event information for a
        given company.
      parameters:
        - name: companyId
          in: path
          description: ID of the company whose codes you want to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          description: The code itself.
                          example: aafb89
                        used:
                          type: boolean
                          description: Indicates if the code has been used.
                          example: false
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /company-profile:
    post:
      summary: Create a company profile
      requestBody:
        description: Request body for creating a company profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyName:
                  type: string
                  example: Tech Solutions Pvt. Ltd.
                gstNumber:
                  type: string
                  example: 29ABCDE1234F2Z5
                primaryContact:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: John
                    lastName:
                      type: string
                      example: Doe
                    contactNumber:
                      type: number
                      example: 1234567890
                    inviteMethod:
                      type: string
                      enum:
                        - Email
                        - Sms
                        - Whatsapp
                      example: Email
                address:
                  type: string
                  example: 123, Business Street, Bangalore, India
                website:
                  type: string
                  example: https://www.techsolutions.com
                email:
                  type: string
                  format: email
                  example: info@techsolutions.com
                secondaryContact:
                  type: object
                  nullable: true
                  properties:
                    firstName:
                      type: string
                      example: Jane
                    lastName:
                      type: string
                      example: Doe
                    contactNumber:
                      type: number
                      example: 9876543210
                    inviteMethod:
                      type: string
                      enum:
                        - Email
                        - Sms
                        - Whatsapp
                      example: Sms
              required:
                - companyName
                - gstNumber
                - primaryContact
                - address
                - website
                - email
      responses:
        '200':
          description: Company profile created successfully. Please verify OTP to continue.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Company profile created successfully. Please verify otp to
                      continue
                  newProfile:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 6123e4b6f2c8fa5f6b9d1234
                      companyName:
                        type: string
                        example: Tech Solutions Pvt. Ltd.
                      otpVerified:
                        type: boolean
                        example: false
                      gstNumber:
                        type: string
                        example: 29ABCDE1234F2Z5
                      primaryContact:
                        type: object
                        properties:
                          firstName:
                            type: string
                            example: John
                          lastName:
                            type: string
                            example: Doe
                          contactNumber:
                            type: number
                            example: 1234567890
                          otpVerified:
                            type: boolean
                            example: false
                      address:
                        type: string
                        example: 123, Business Street, Bangalore, India
                      website:
                        type: string
                        example: https://www.techsolutions.com
                      email:
                        type: string
                        format: email
                        example: info@techsolutions.com
                      secondaryContact:
                        type: object
                        nullable: true
                        properties:
                          firstName:
                            type: string
                            example: Jane
                          lastName:
                            type: string
                            example: Doe
                          contactNumber:
                            type: number
                            example: 9876543210
                          otpVerified:
                            type: boolean
                            example: false
                      purchaseCodes:
                        type: array
                        items:
                          type: string
                          format: uuid
                          example: 5f4e5c67f9d8d12345678901
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Company Profile
  /company-profiles/{companyId}/verify-contact:
    post:
      summary: Verify company contact using OTP
      description: >-
        Verifies the contact information (either primary or secondary) for the
        company profile using the provided OTP.
      tags:
        - Company Profile
      parameters:
        - in: path
          name: companyId
          schema:
            type: string
          required: true
          description: ID of the company profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contactNumber:
                  type: number
                  example: 1234567890
                  description: The contact number of the user to be verified
                otp:
                  type: string
                  example: '123456'
                  description: OTP provided to verify the contact number
              required:
                - contactNumber
                - otp
      responses:
        '200':
          description: Contact information successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: John Doe's contact information has been verified
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /company-profile/{companyId}:
    get:
      summary: Fetch a company profile by id
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: objectId
            example: 66e1839f04bcf8e6974a4bdf
      responses:
        '200':
          description: Company profile successfully fetched.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: uuid
                    example: 66e1839f04bcf8e6974a4bdf
                    description: Unique identifier of the company profile
                  companyName:
                    type: string
                    example: test
                    description: The name of the company
                  gstNumber:
                    type: string
                    example: '123456789012346'
                    description: GST number of the company
                  primaryContact:
                    type: object
                    properties:
                      user:
                        type: string
                        format: uuid
                        example: 66e1839f04bcf8e6974a4bea
                        description: >-
                          Unique identifier of the user associated with the
                          primary contact
                      otpVerified:
                        type: boolean
                        example: true
                        description: >-
                          Whether the OTP for the primary contact has been
                          verified
                      otp:
                        type: number
                        example: 116580
                        description: OTP sent to the primary contact
                      _id:
                        type: string
                        format: uuid
                        example: 66e1839f04bcf8e6974a4bec
                        description: Unique identifier of the primary contact
                  secondaryContact:
                    type: object
                    nullable: true
                    properties:
                      user:
                        type: string
                        format: uuid
                        example: 66e1839f04bcf8e6974a4be4
                        description: >-
                          Unique identifier of the user associated with the
                          secondary contact
                      otpVerified:
                        type: boolean
                        example: true
                        description: >-
                          Whether the OTP for the secondary contact has been
                          verified
                      otp:
                        type: number
                        example: 503379
                        description: OTP sent to the secondary contact
                      _id:
                        type: string
                        format: uuid
                        example: 66e1839f04bcf8e6974a4be6
                        description: Unique identifier of the secondary contact
                  address:
                    type: string
                    example: address
                    description: The physical address of the company
                  website:
                    type: string
                    example: test.com
                    description: The company's website URL
                  email:
                    type: string
                    format: email
                    example: aman.shah02@gmail.com
                    description: Email address of the company
                  purchaseCodes:
                    type: array
                    items:
                      type: string
                      format: uuid
                      example: 66e188a2ca7f8e1974ed240c
                      description: Unique identifier of the associated purchase codes
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Company Profile
  /company-profile/{companyId}/vendor-directory:
    post:
      summary: "Create a vendor"
      tags:
        - Company Profile
      description: "Creates a vendor of a specified type for the given company"
      parameters:
        - name: companyId
          in: path
          required: true
          description: "ID of the company for which the vendor is being created"
          schema:
            type: string
        - name: vendorType
          in: query
          required: true
          description: "Type of the vendor being created"
          schema:
            type: string
            enum: 
              - musicVendor
              - catererVendor
              - mehendiVendor
              - decoratorVendor
              - travelVendor
              - hotelVendor
              - venueVendor
              - panditVendor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorDirectoryPayload'
                      
      responses:
        '200':
          description: "Vendor created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vendor added successfully"
        '400':
          $ref: '#/components/responses/400'
          
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: "Create a vendor"
      tags:
        - Company Profile
      description: "Creates a vendor of a specified type for the given company"
      parameters:
        - name: companyId
          in: path
          required: true
          description: "ID of the company for which the vendor is being created"
          schema:
            type: string
        - name: vendorType
          in: query
          required: true
          description: "Type of the vendor being created"
          schema:
            type: string
            enum: 
              - musicVendor
              - catererVendor
              - mehendiVendor
              - decoratorVendor
              - travelVendor
              - hotelVendor
              - venueVendor
              - panditVendor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/VendorDirectoryPayload'
                - type: object
                  required: 
                    - vendorId
                  properties: 
                    vendorId:
                      type: string
                      format: objectId
                      description: 'Id of the vendor'
                      
      responses:
        '200':
          description: "Vendor updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vendor updated successfully"
        '400':
          $ref: '#/components/responses/400'
          
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Fetch vendors by company ID or find a specific vendor by its ID.
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: objectId
            example: 66e1839f04bcf8e6974a4bdf
        - name: vendorId
          in: query
          schema:
            type: string
            format: objectId
            example: 66e1839f04bcf8e6974a4bdf
      responses:
        '200':
          description: Company profile successfully fetched.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    oneOf:
                      - type: array
                        items:
                          type: object
                          oneOf:
                            - $ref: '#/components/schemas/MusicVendor'
                            - $ref: '#/components/schemas/CatererVendor'
                            - $ref: '#/components/schemas/MehendiVendor'
                            - $ref: '#/components/schemas/DecoratorVendor'
                            - $ref: '#/components/schemas/TravelVendor'
                            - $ref: '#/components/schemas/HotelVendor'
                            - $ref: '#/components/schemas/VenueVendor'
                            - $ref: '#/components/schemas/PanditVendor'
                            - $ref: '#/components/schemas/PhotographerVendor'
                      - type: object
                        oneOf:
                          - $ref: '#/components/schemas/MusicVendor'
                          - $ref: '#/components/schemas/CatererVendor'
                          - $ref: '#/components/schemas/MehendiVendor'
                          - $ref: '#/components/schemas/DecoratorVendor'
                          - $ref: '#/components/schemas/TravelVendor'
                          - $ref: '#/components/schemas/HotelVendor'
                          - $ref: '#/components/schemas/VenueVendor'
                          - $ref: '#/components/schemas/PanditVendor'
                          - $ref: '#/components/schemas/PhotographerVendor'
              examples:
                resultArray:
                  value: |-
                    {
                        "result": [
                            {
                                "contactDetails": {
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "primaryContactNumber": 6454684465,
                                    "secondaryContactNumber": 9876543210,
                                    "email": "john.doe@example.com"
                                },
                                "address": {
                                    "add1": "802 Simonis Highway",
                                    "add2": "Suite 100",
                                    "city": "Prosaccoburgh",
                                    "state": "Gujarat",
                                    "country": "Namibia",
                                    "pinCode": 380007
                                },
                                "price": {
                                    "min": 500,
                                    "max": 2000,
                                    "currency": "INR",
                                    "unit": "Per Hour"
                                },
                                "events": [],
                                "_id": "670e1433e4e26fca7cd3f4d2",
                                "type": "DJ",
                                "musicEquipment": true,
                                "businessName": "Test 1",
                                "description": "We provide top-notch DJ services for events.",
                                "company": "66e1839f04bcf8e6974a4bdf",
                                "vendorType": "musicVendor",
                                "createdAt": "2024-10-15T07:05:23.983Z",
                                "updatedAt": "2024-10-15T07:10:28.302Z",
                                "__v": 0
                            }
                        ]
                    }
                result:
                  value: |-
                    {
                        "result": {
                            "contactDetails": {
                                "firstName": "John",
                                "lastName": "Doe",
                                "primaryContactNumber": 6454684465,
                                "secondaryContactNumber": 9876543210,
                                "email": "john.doe@example.com"
                            },
                            "address": {
                                "add1": "802 Simonis Highway",
                                "add2": "Suite 100",
                                "city": "Prosaccoburgh",
                                "state": "Gujarat",
                                "country": "Namibia",
                                "pinCode": 380007
                            },
                            "price": {
                                "min": 500,
                                "max": 2000,
                                "currency": "INR",
                                "unit": "Per Hour"
                            },
                            "events": [],
                            "_id": "670e1433e4e26fca7cd3f4d2",
                            "type": "DJ",
                            "musicEquipment": true,
                            "businessName": "Test 1",
                            "description": "We provide top-notch DJ services for events.",
                            "company": "66e1839f04bcf8e6974a4bdf",
                            "vendorType": "musicVendor",
                            "createdAt": "2024-10-15T07:05:23.983Z",
                            "updatedAt": "2024-10-15T07:10:28.302Z",
                            "__v": 0
                        }
                    }
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Company Profile
    delete:
      summary: Delete vendor by company id and vendor id.
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: objectId
            example: 66e1839f04bcf8e6974a4bdf
        - name: vendorId
          in: query
          schema:
            type: string
            format: objectId
            example: 66e1839f04bcf8e6974a4bdf
      responses:
        '200':
          description: Company profile successfully fetched.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Vendor deleted successfully.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /document/upload:
    post:
      summary: Upload a user document
      requestBody:
        description: Payload for uploading a document
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - aadhaar
                    - passport
                    - panCard
                  description: The type of document being uploaded
                  example: passport
                country:
                  type: string
                  description: Country where the document was issued
                  example: India
                path:
                  type: array
                  items:
                    type: string
                  description: >-
                    An array of file paths where the document is stored (adjust
                    based on storage       solution)
                  example:
                    - uploads/documents/passport-1234.jpg
                    - uploads/documents/passport-1234-back.jpg
                userId:
                  type: string
                  format: uuid
                  description: The user ID associated with the document upload
                  example: 66e1839f04bcf8e6974a4bdf
                documentNumber:
                  type: string
                  description: The document number (optional)
                  example: A1234567
              required:
                - type
                - country
                - path
                - userId
      responses:
        '200':
          description: Document successfully uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Document successfully uploaded. Your document is now
                      available for use.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /document/add-required:
    post:
      summary: Add required document
      requestBody:
        description: Payload for required documents related to an event
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - aadhaar
                    - passport
                    - panCard
                  description: The type of document required
                  example: passport
                eventId:
                  type: string
                  description: The unique identifier of the event
                  format: objectId
                  example: 1234567890abcdef
                country:
                  type: string
                  nullable: true
                  description: The country where the document is issued (optional)
                  example: India
              required:
                - type
                - eventId
      responses:
        '200':
          description: Required document successfully added to the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Required document successfully added to the event. This
                      document is now required for all guests.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /document/{documentId}/changes:
    post:
      summary: Request changes in a document
      parameters:
        - name: documentId
          in: path
          required: true
          description: The id of the document for which changes are requested
          schema:
            type: string
            format: objectId
            example: 66e189a48dacf4f20d7e51d2
      requestBody:
        description: Payload for requesting a change in document status related to an event
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  format: uuid
                  description: >-
                    The unique identifier of the event for which the document
                    change is requested
                  example: 65123f4d5a45b12cd4aeb67e
                comment:
                  type: string
                  description: A comment or reason for requesting the document change
                  example: Please update the document type to include the new passport.
              required:
                - eventId
                - comment
      responses:
        '200':
          description: Change request for document successfully submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Change request for document successfully submitted. The
                      event organizer will review your request.
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /document/{documentId}/change-status:
    patch:
      summary: Change the status of a document in an event
      description: >-
        Update the status of a specific event document to either `approved`,
        `rejected`, or `pending`.
      parameters:
        - in: path
          name: documentId
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the document whose status is being changed
          example: 65123f4d5a45b12cd4aeb67e
      requestBody:
        description: Payload containing the new document status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  type: string
                  enum:
                    - approved
                    - rejected
                    - pending
                  description: The new status for the document
                  example: approved
              required:
                - newStatus
      responses:
        '200':
          description: Document status successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Document status successfully updated. The document status
                      has been changed to approved.
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /documents/{documentId}:
    patch:
      summary: Update a document's information
      description: >-
        Update the details of an existing document, including its path, status,
        and country.
      parameters:
        - in: path
          name: documentId
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the document to be updated
          example: 65123f4d5a45b12cd4aeb67e
      requestBody:
        description: Payload for updating document information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: array
                  items:
                    type: string
                  description: Array of strings representing file paths for the document
                  example:
                    - /path/to/document1.pdf
                    - /path/to/document2.pdf
                status:
                  type: string
                  description: The current status of the document
                  example: approved
                country:
                  type: string
                  description: The country associated with the document
                  example: USA
              required:
                - path
                - status
                - country
      responses:
        '200':
          description: Document successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Document successfully updated. Your document has been
                      updated with the new information.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
    get:
      summary: Retrieve a specific document
      description: Get the details of a document by its unique document ID.
      parameters:
        - in: path
          name: documentId
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the document.
          example: 66f54c41bc6cad2c33f2c68f
      responses:
        '200':
          description: Document successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  document:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: Document ID
                        example: 66f54c41bc6cad2c33f2c68f
                      type:
                        type: string
                        description: Type of the document
                        example: aadhaar
                      country:
                        type: string
                        description: Country associated with the document
                        example: India
                      path:
                        type: array
                        items:
                          type: string
                        description: Paths or sections of the document
                        example:
                          - Front
                          - Back
                      user:
                        type: string
                        description: User ID to whom the document belongs
                        example: 66e1839f04bcf8e6974a4be4
                      status:
                        type: string
                        description: Status of the document
                        example: approved
                      eventDetails:
                        type: array
                        items:
                          type: object
                        description: Event-related details for the document
                        example: []
                      changeRequest:
                        type: array
                        items:
                          type: object
                        description: Change requests related to the document
                        example: []
                      createdAt:
                        type: string
                        format: date-time
                        description: Document creation timestamp
                        example: '2024-09-26T11:57:53.225Z'
                      updatedAt:
                        type: string
                        format: date-time
                        description: Document update timestamp
                        example: '2024-09-26T11:57:53.225Z'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /documents/get-user-documents:
    get:
      summary: Retrieve user documents
      description: >-
        Get the list of documents associated with a user by their user ID. Only
        documents with a status other than "rejected" are returned.
      responses:
        '200':
          description: Documents successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: Document ID
                          example: 66f54c41bc6cad2c33f2c68f
                        type:
                          type: string
                          description: Type of the document
                          example: aadhaar
                        country:
                          type: string
                          description: Country associated with the document
                          example: India
                        path:
                          type: array
                          items:
                            type: string
                          description: Paths or sections of the document
                          example:
                            - Front
                            - Back
                        user:
                          type: string
                          description: User ID to whom the document belongs
                          example: 66e1839f04bcf8e6974a4be4
                        status:
                          type: string
                          description: Status of the document
                          example: approved
                        eventDetails:
                          type: array
                          items:
                            type: object
                          description: Event-related details for the document
                          example: []
                        changeRequest:
                          type: array
                          items:
                            type: object
                          description: Change requests related to the document
                          example: []
                        createdAt:
                          type: string
                          format: date-time
                          description: Document creation timestamp
                          example: '2024-09-26T11:57:53.225Z'
                        updatedAt:
                          type: string
                          format: date-time
                          description: Document update timestamp
                          example: '2024-09-26T11:57:53.225Z'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /documents/request:
    get:
      summary: Request required documents from event guests
      description: >-
        Request specific required documents from the primary and sub-guests of
        an event. Guests will be notified to upload the required documents.
      parameters:
        - in: query
          name: eventId
          schema:
            type: string
          required: true
          description: The unique identifier of the event
          example: 65123f4d5a45b12cd4aeb67e
      responses:
        '200':
          description: Documents successfully requested from guests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Documents successfully requested from guests. Guests will
                      be notified to upload the required documents.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Documents
  /event:
    post:
      summary: Create a new event
      description: >-
        Creates a new event, validates company and code, and associates the
        event with the bride and groom users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyId:
                  type: string
                  format: uuid
                  description: ID of the company organizing the event
                  example: 66f54c41bc6cad2c33f2c68f
                code:
                  type: string
                  description: Unique event code
                  example: ABC123
                eventName:
                  type: string
                  description: Name of the event
                  example: Wedding Ceremony
                finalEventDate:
                  type: string
                  format: date
                  description: Date of the final event
                  example: '2024-10-15'
                finalEventCity:
                  type: string
                  description: The city where the final event will take place
                  example: New York
                groomDetails:
                  type: object
                  description: Details of the groom
                  properties:
                    firstName:
                      type: string
                      description: Groom's first name
                      example: John
                    lastName:
                      type: string
                      description: Groom's last name
                      example: Doe
                    contactNumber:
                      type: number
                      description: Groom's contact number
                      example: 9876543210
                    city:
                      type: string
                      description: Groom's city of residence
                      example: Los Angeles
                brideDetails:
                  type: object
                  description: Details of the bride
                  properties:
                    firstName:
                      type: string
                      description: Bride's first name
                      example: Jane
                    lastName:
                      type: string
                      description: Bride's last name
                      example: Smith
                    contactNumber:
                      type: number
                      description: Bride's contact number
                      example: 9876543211
                    city:
                      type: string
                      description: Bride's city of residence
                      example: San Francisco
                budget:
                  type: string
                  description: Optional event budget
                  example: $50000
              required:
                - companyId
                - code
                - eventName
                - finalEventDate
                - groomDetails
                - brideDetails
      responses:
        '200':
          description: Event successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event created successfully
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Events
  /function:
    post:
      summary: Create a new function for an event
      tags:
        - Functions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
                - name
                - functionType
                - date
                - startTime
                - endTime
              properties:
                eventId:
                  type: string
                  format: ObjectId
                  example: 650b3b5d4f3a2a00123abc45
                  description: The unique identifier for the event to which the function belongs.
                name:
                  type: string
                  example: Stage Setup
                  description: The descriptive name of the function to be created.
                functionType:
                  type: string
                  enum:
                    - Wedding
                    - Reception
                  description: The type of function being created, indicating its purpose (e.g., Wedding, Reception).
                date:
                  type: string
                  format: date-time
                  example: "2024-10-04T11:01:13.156Z"
                  description: The date when the function is scheduled to take place, in ISO 8601 format.
                startTime:
                  type: string
                  example: "13:00:00"
                  description: The starting time of the function, formatted as HH:mm:ss.
                endTime:
                  type: string
                  example: "16:00:00"
                  description: The ending time of the function, formatted as HH:mm:ss.
      responses:
        '200':
          description: Indicates that the function was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Function successfully created.
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update an existing function by its ID
      tags:
        - Functions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - functionId
              properties:
                functionId:
                  type: string
                  format: ObjectId
                  example: 650b3b5d4f3a2a00123abc45
                  description: The unique identifier for the function that needs to be updated.
                name:
                  type: string
                  example: Stage Setup
                  description: The updated name for the function.
                functionType:
                  type: string
                  enum:
                    - Wedding
                    - Reception
                  description: The updated type of function being created, indicating its purpose.
                date:
                  type: string
                  format: date-time
                  example: "2024-10-04T11:01:13.156Z"
                  description: The updated date for when the function is scheduled, in ISO 8601 format.
                startTime:
                  type: string
                  example: "13:00:00"
                  description: The updated starting time of the function, formatted as HH:mm:ss.
                endTime:
                  type: string
                  example: "16:00:00"
                  description: The updated ending time of the function, formatted as HH:mm:ss.
      responses:
        '200':
          description: Indicates that the function was updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Function successfully updated.
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'  
    get:
      summary: Retrieve functions associated with a specific event by its ID
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: eventId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the event for which functions are being fetched.
          example: 650b3b5d4f3a2a00123abc45
      responses:
        '200':
          description: A list of functions associated with the specified event was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionsResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /functions/{functionId}/caterer:
    post:
      summary: Add caterer to a function
      description: Adds a new caterer to a specific function.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CateringDetails'
      responses:
        '200':
          description: Caterer added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Caterer has been successfully added to the function.'
        '404':
          $ref: '#/components/responses/404'
          
        '500':
          $ref: '#/components/responses/500'
          
      tags:
        - Functions
    put:
      summary: Update caterer details in a function
      description: Updates the existing caterer details for a specific function.
      tags:
        - Functions
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CateringDetails'
      responses:
        '200':
          description: Caterer updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Caterer has been updated successfully.'
        '404':
          $ref: '#/components/responses/404'
    get:
      summary: Get caterer details for a function
      description: Retrieves the caterer details associated with a specific function.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      responses:
        '200':
          description: Successfully retrieved caterer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/CateringDetails'
        '404':
          $ref: '#/components/responses/404'
          
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Functions
    delete:
      summary: Remove caterer details from a function
      description: Removes the caterer details associated with a specific function.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      responses:
        '200':
          description: Caterer details removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Caterer successfully removed from the function.'
        '404':
          $ref: '#/components/responses/404'
          
        '500':
          $ref: '#/components/responses/500'
      tags: 
        - Functions
  /functions/{functionId}/venue:
    post:
      summary: Add or replace a venue for a function
      description: This API allows the user to add or replace the venue for a specific function. If a venue already exists, the user can choose whether to replace it or not.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
        - in: query
          name: replaceVenue
          required: false
          schema:
            type: string
            enum: [YES, NO]
          description: Determines if the existing venue should be replaced.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '200':
          description: Venue successfully added or a conflict message if venue already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Venue successfully added to the function.'
                  conflict:
                    type: boolean
                    example: false
        '400':
          $ref: '#/components/responses/400'
          
        '404':
          $ref: '#/components/responses/404'
          
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Functions
    put:
      summary: Edit venue details for a function
      description: This API allows the user to update the venue details for a specific function. If the venue exists, it will be replaced with the new details.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '200':
          description: Venue details updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Venue details updated successfully.'
                  conflict:
                    type: boolean
                    example: false
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: "#/components/responses/400"
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Functions
    delete:
      summary: Remove venue from a function
      description: This API allows the user to remove the venue details from a specific function.
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
          description: The ID of the function.
      responses:
        '200':
          description: Venue successfully removed from the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Venue successfully removed from the function.'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - Functions
  /functions/{functionId}:
    get:
      summary: Retrieve a specific function by its unique identifier
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The unique identifier of the function to be fetched.
          example: 650b3b5d4f3a2a00123abc45
      responses:
        '200':
          description: The details of the specified function were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a function by its ID
      tags:
        - Functions
      parameters:
        - in: path
          name: functionId
          schema:
            type: string
            format: ObjectId
          required: true
          description: The ID of the function to be deleted
          example: 650b3b5d4f3a2a00123abc45
      responses:
        '200':
          description: Function successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Function successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'        
  /functions/caterer:
    post:
      summary: Create a new caterer
      description: This endpoint creates a new caterer by providing caterer details.
      tags:
        - Functions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICaterer'
      responses:
        '200':
          description: New caterer added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New caterer added successfully
        '400':
          $ref: '#/components/responses/400'
          
        '404':
          $ref: '#/components/responses/404'
          
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get all caterers for a specific company
      description: Retrieve all caterers for a specific company by providing the company ID as a query parameter.
      tags:
        - Functions
      parameters:
        - name: companyId
          in: query
          required: true
          description: The ID of the company to get all associated caterers
          schema:
            type: string
            example: "60d21b4667d0d8992e610c85"
      responses:
        '200':
          description: Caterers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  caterer:
                    type: array
                    items:
                      $ref: '#/components/schemas/ICaterer'
                example:
                    caterer:
                    - address:
                      coordinates:
                        lat: 22
                        lng: 70
                      add1: "Add 1"
                      add2: "Add 2"
                      city: "Himmatnagar"
                      state: "Gujarat"
                      country: "India"
                      pinCode: 300009
                    contactDetails:
                      firstName: "Ramesh"
                      lastName: "Lakhi"
                      primaryContactNumber: 9825606703
                      secondaryContactNumber: 9999999999
                      email: "a@b.com"
                    _id: "6703e12ab3a80f0ac5bfad63"
                    company:
                      _id: "66e1839f04bcf8e6974a4bdf"
                      companyName: "test"
                      gstNumber: "123456789012346"
                      primaryContact:
                        user: "66e1839f04bcf8e6974a4bea"
                        otpVerified: true
                        otp: 116580
                        _id: "66e1839f04bcf8e6974a4bec"
                      secondaryContact:
                        user: "66e1839f04bcf8e6974a4be4"
                        otpVerified: true
                        otp: 503379
                        _id: "66e1839f04bcf8e6974a4be6"
                      address: "address"
                      website: "test.com"
                      email: "aman.shah02@gmail.com"
                      purchaseCodes:
                        - "66e188a2ca7f8e1974ed240c"
                        - "66f3f3c2a5bc57373bd12e47"
                      createdAt: "2024-09-11T11:48:47.557Z"
                      updatedAt: "2024-09-25T11:28:02.221Z"
                      __v: 2
                    catererName: "test caterer"
                    createdAt: "2024-10-07T13:24:58.986Z"
                    updatedAt: "2024-10-07T13:24:58.986Z"
                    __v: 0
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /functions/caterer/{catererId}:
    put:
      summary: Edit an existing caterer
      description: This endpoint updates an existing caterer with new details.
      tags:
        - Functions
      parameters:
        - name: catererId
          in: path
          required: true
          description: The ID of the caterer to edit
          schema:
            type: string
            example: "60d21b4667d0d8992e610c85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICaterer'
      responses:
        '200':
          description: Caterer updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Caterer updated successfully
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'        
    get:
      summary: Get a specific caterer by ID
      description: Retrieve a specific caterer by providing the caterer ID. If the caterer is found, detailed information is returned.
      tags:
        - Functions
      parameters:
        - name: catererId
          in: path
          required: true
          description: The ID of the caterer to retrieve
          schema:
            type: string
            example: "60d21b4667d0d8992e610c85"
      responses:
        '200':
          description: Caterer retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  caterer:
                    $ref: '#/components/schemas/ICaterer'
                example:
                    caterer:
                      address:
                        coordinates:
                          lat: 22
                          lng: 70
                        add1: "Add 1"
                        add2: "Add 2"
                        city: "Himmatnagar"
                        state: "Gujarat"
                        country: "India"
                        pinCode: 300009
                    contactDetails:
                      firstName: "Ramesh"
                      lastName: "Lakhi"
                      primaryContactNumber: 9825606703
                      secondaryContactNumber: 9999999999
                      email: "a@b.com"
                    _id: "6703e12ab3a80f0ac5bfad63"
                    company:
                      _id: "66e1839f04bcf8e6974a4bdf"
                      companyName: "test"
                      gstNumber: "123456789012346"
                      primaryContact:
                        user: "66e1839f04bcf8e6974a4bea"
                        otpVerified: true
                        otp: 116580
                        _id: "66e1839f04bcf8e6974a4bec"
                      secondaryContact:
                        user: "66e1839f04bcf8e6974a4be4"
                        otpVerified: true
                        otp: 503379
                        _id: "66e1839f04bcf8e6974a4be6"
                      address: "address"
                      website: "test.com"
                      email: "aman.shah02@gmail.com"
                      purchaseCodes:
                        - "66e188a2ca7f8e1974ed240c"
                        - "66f3f3c2a5bc57373bd12e47"
                      createdAt: "2024-09-11T11:48:47.557Z"
                      updatedAt: "2024-09-25T11:28:02.221Z"
                      __v: 2
                    catererName: "test caterer"
                    createdAt: "2024-10-07T13:24:58.986Z"
                    updatedAt: "2024-10-07T13:24:58.986Z"
                    __v: 0
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /function/{functionId}/menu:
    post:
      summary: Add a menu to the catering details of a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - catererRef
                - category
                - Functions
              properties:
                catererRef:
                  type: string
                  format: ObjectId
                  example: 650b3b5d4f3a2a00123abc45
                  description: The unique identifier for the caterer to which the menu will be added.
                category:
                  type: string
                  description: The category in which the menu has to added to.
                  enum:
                    - breakfast
                    - brunch
                    - lunch
                    - highTea
                    - dinner
                menu:
                  $ref: '#/components/schemas/IMenu'
      responses:
        '200':
          description: Successful response indicating the menu was created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu successfully created."
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve the menu for a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the function whose menu is to be retrieved.
        - in: query
          name: catererRef
          required: true
          schema:
            type: string
            format: ObjectId
            example: 650b3b5d4f3a2a00123abc45
          description: The unique identifier for the caterer to which the menu will be added.
        - in: query
          name: category
          schema:
            type: string
            description: The category in which the menu has to added to.
            enum:
              - breakfast
              - brunch
              - lunch
              - highTea
              - dinner
      responses:
        '200':
          description: Successful response containing the menu details
          content:
            application/json:
              schema:
                type: object
                properties:
                  menu:
                    anyOf:
                      - type: object
                        properties:
                          breakfast:
                            $ref: '#/components/schemas/MenuCategory'
                          brunch:
                            $ref: '#/components/schemas/MenuCategory'
                          lunch:
                            $ref: '#/components/schemas/MenuCategory'
                          highTea:
                            $ref: '#/components/schemas/MenuCategory'
                          dinner:
                            $ref: '#/components/schemas/MenuCategory'
                      - anyOf:
                          - type: object
                            properties:
                              breakfast:
                                $ref: '#/components/schemas/MenuCategory'
                          - type: object
                            properties:
                              brunch:
                                $ref: '#/components/schemas/MenuCategory'
                          - type: object
                            properties:
                              lunch:
                                $ref: '#/components/schemas/MenuCategory'
                          - type: object
                            properties:
                              highTea:
                                $ref: '#/components/schemas/MenuCategory'
                          - type: object
                            properties:
                              dinner:
                                $ref: '#/components/schemas/MenuCategory'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the menu for a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the function whose menu is to be deleted.
        - in: query
          name: catererRef
          required: true
          schema:
            type: string
            format: ObjectId
            example: 650b3b5d4f3a2a00123abc45
          description: The unique identifier for the caterer to which the menu will be added.
        - in: query
          name: category
          schema:
            type: string
            description: The category in which the menu has to added to.
            enum:
              - breakfast
              - brunch
              - lunch
              - highTea
              - dinner
      responses:
        '200':
          description: Successful response indicating that the menu was deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu successfully deleted."
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /function/{functionId}/menu-item:
    post:
      summary: Add a menu item to a specific course in the menu
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FunctionsItem
                - course
                - catererRef
                - category
              properties:
                menuItem:
                  $ref: '#/components/schemas/IMenuItems'
                course:
                  type: string
                  description: The course (e.g., starters, main course, dessert) to which the menu item will be added.
                catererRef:
                  type: string
                  format: ObjectId
                  example: 650b3b5d4f3a2a00123abc45
                  description: The unique identifier for the caterer to which the menu will be added.
                category:
                  type: string
                  description: The category in which the menu has to added to.
                  enum:
                    - breakfast
                    - brunch
                    - lunch
                    - highTea
                    - dinner                
  
      responses:
        '200':
          description: Successful response indicating that the menu item was added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu item added successfully."
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve a specific menu item by its ID from a specific course
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          description: The unique identifier for the function from which to retrieve the menu item.
          schema:
            type: string
            format: ObjectId
        - name: menuItemId
          in: query
          required: true
          description: The unique identifier for the menu item to retrieve.
          schema:
            type: string
            format: ObjectId
        - name: course
          in: query
          required: true
          description: The course (e.g., beverages, starters, main course, dessert) from which to retrieve the menu item.
          schema:
            type: string
        - in: query
          name: catererRef
          required: true
          schema:
            type: string
            format: ObjectId
            example: 650b3b5d4f3a2a00123abc45
          description: The unique identifier for the caterer to which the menu will be added.
        - in: query
          name: category
          schema:
            type: string
            description: The category in which the menu has to added to.
            enum:
              - breakfast
              - brunch
              - lunch
              - highTea
              - dinner
      responses:
        '200':
          description: Successful response containing the requested menu item
          content:
            application/json:
              schema:
                type: object
                properties:
                  menuItem:
                    $ref: '#/components/schemas/MenuItem'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update a specific menu item in a specific course
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FunctionsItemId
                - course
                - updatedMenuItem
                - catererRef
                - category
              properties:
                menuItemId:
                  type: string
                  format: ObjectId
                  description: The unique identifier for the menu item to update.
                course:
                  type: string
                  description: The course (e.g., beverages, starters, main course, dessert) to which the menu item belongs.
                  enum: 
                    - beverages
                    - starters
                    - mainCourse
                    - dessert
                updatedMenuItem:
                  type: object
                  properties:
                    title:
                      type: string
                    subTitle:
                      type: string
                    cuisine:
                      type: string
                    mealPreference:
                      type: string
                    isVegan:
                      type: boolean
                    isJain:
                      type: boolean
                    isSwaminarayan:
                      type: boolean
                    isRecommendedByChef:
                      type: boolean
                    description:
                      type: string
                    ingredients:
                      type: array
                      items:
                        type: string
                    allergicIngredients:
                      type: array
                      items:
                        type: string
                    servingType:
                      type: string
                catererRef:
                  type: string
                  format: ObjectId
                  example: 650b3b5d4f3a2a00123abc45
                  description: The unique identifier for the caterer to which the menu will be added.
                category:
                  type: string
                  description: The category in which the menu has to added to.
                  enum:
                    - breakfast
                    - brunch
                    - lunch
                    - highTea
                    - dinner                
      responses:
        '200':
          description: Successful response indicating the menu item was updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu item updated successfully"
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a specific menu item from a specific course
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the function.
        - in: query
          name: menuItemId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the menu item to delete.
        - in: query
          name: course
          required: true
          schema:
            type: string
          description: The course (e.g., beverages, starters, main course, dessert) from which the menu item should be deleted.
        - in: query
          name: catererRef
          required: true
          schema:
            type: string
            format: ObjectId
            example: 650b3b5d4f3a2a00123abc45
          description: The unique identifier for the caterer to which the menu will be added.
        - in: query
          name: category
          schema:
            type: string
            description: The category in which the menu has to added to.
            enum:
              - breakfast
              - brunch
              - lunch
              - highTea
              - dinner
      responses:
        '200':
          description: Successful response indicating the menu item was deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu item deleted successfully"
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /function/{functionId}/dress-code:
    post:
      summary: Add a dress code to a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - backgroundImage
                - description
                - men
                - women
              properties:
                backgroundImage:
                  type: string
                  example: "https://example.com/background.jpg"
                  description: URL of the background image for the dress code.
                description:
                  type: string
                  example: "Formal attire required."
                  description: A brief description of the dress code.
                men:
                  type: object
                  required:
                    - theme
                    - referenceImages
                    - title
                    - subTitle
                  properties:
                    theme:
                      type: string
                      example: "Classic"
                      description: The theme for men's dress code.
                    referenceImages:
                      type: array
                      items:
                        type: string
                        format: ObjectId
                      example: [ "650b3b5d4f3a2a00123abc45", "650b3b5d4f3a2a00123abc46" ]
                      description: An array of ObjectIds representing reference images for men's attire.
                    title:
                      type: string
                      example: "Men's Attire"
                      description: Title for men's dress code section.
                    subTitle:
                      type: string
                      example: "Smart Casual"
                      description: Subtitle providing additional details for men's dress code.
                women:
                  type: object
                  required:
                    - theme
                    - referenceImages
                    - title
                    - subTitle
                  properties:
                    theme:
                      type: string
                      example: "Elegant"
                      description: The theme for women's dress code.
                    referenceImages:
                      type: array
                      items:
                        type: string
                        format: ObjectId
                      example: [ "650b3b5d4f3a2a00123abc47", "650b3b5d4f3a2a00123abc48" ]
                      description: An array of ObjectIds representing reference images for women's attire.
                    title:
                      type: string
                      example: "Women's Attire"
                      description: Title for women's dress code section.
                    subTitle:
                      type: string
                      example: "Cocktail Dress"
                      description: Subtitle providing additional details for women's dress code.
      responses:
        '200':
          description: Dress code successfully added to the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dress code successfully added to the function."
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Edit the dress code for a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backgroundImage:
                  type: string
                  example: "https://example.com/new_background.jpg"
                  description: (Optional) URL of the new background image for the dress code.
                description:
                  type: string
                  example: "Formal attire required with a casual touch."
                  description: (Optional) A brief description of the updated dress code.
                men:
                  type: object
                  properties:
                    theme:
                      type: string
                      example: "Smart Casual"
                      description: (Optional) The updated theme for men's dress code.
                    title:
                      type: string
                      example: "Men's Updated Attire"
                      description: (Optional) Updated title for men's dress code section.
                    subTitle:
                      type: string
                      example: "Business Casual"
                      description: (Optional) Updated subtitle for men's dress code section.
                women:
                  type: object
                  properties:
                    theme:
                      type: string
                      example: "Elegant Evening"
                      description: (Optional) The updated theme for women's dress code.
                    title:
                      type: string
                      example: "Women's Updated Attire"
                      description: (Optional) Updated title for women's dress code section.
                    subTitle:
                      type: string
                      example: "Evening Gown"
                      description: (Optional) Updated subtitle for women's dress code section.
      responses:
        '200':
          description: Dress code successfully edited for the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dress code successfully edited."
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Retrieve the dress code for a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the function whose dress code is being fetched.
          example: 650b3b5d4f3a2a00123abc45
      responses:
        '200':
          description: Successful response containing the dress code details
          content:
            application/json:
              schema:
                type: object
                properties:
                  dressCode:
                    type: object
                    properties:
                      men:
                        type: object
                        properties:
                          theme:
                            type: string
                            example: "Formal Attire"
                          referenceImages:
                            type: array
                            items:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: ObjectId
                                  example: "66ffc8df24589a57d7594fb3"
                                path:
                                  type: string
                                  example: "src/uploads/dressCode/2024-10-04T10-52-15.148Z - test.jpg"
                                name:
                                  type: string
                                  example: "test.jpg"
                                referenceType:
                                  type: string
                                  example: "DressCodeAttachment"
                                function:
                                  type: string
                                  format: ObjectId
                                  example: "66fbd5db1d5dd5f5282a3adc"
                          title:
                            type: string
                            example: "Men's Formal Wear"
                          subTitle:
                            type: string
                            example: "Smart Casual"
                      women:
                        type: object
                        properties:
                          theme:
                            type: string
                            example: "Elegant Evening"
                          referenceImages:
                            type: array
                            items:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: ObjectId
                                  example: "66ffc8f224589a57d7594fb5"
                                path:
                                  type: string
                                  example: "src/uploads/dressCode/2024-10-04T10-52-34.828Z - test.jpg"
                                name:
                                  type: string
                                  example: "test.jpg"
                                referenceType:
                                  type: string
                                  example: "DressCodeAttachment"
                                function:
                                  type: string
                                  format: ObjectId
                                  example: "66fbd5db1d5dd5f5282a3adc"
                          title:
                            type: string
                            example: "Women's Evening Gown"
                          subTitle:
                            type: string
                            example: "Glamorous"
                      backgroundImage:
                        type: string
                        example: "https://example.com/background.jpg"
                      description:
                        type: string
                        example: "Dress code for the formal event."
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the dress code for a specific function
      tags:
        - Functions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: functionId
          required: true
          schema:
            type: string
            format: ObjectId
          description: The unique identifier for the function whose dress code is being deleted.
          example: 650b3b5d4f3a2a00123abc45
      responses:
        '200':
          description: Successful response indicating the dress code was deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dress code successfully deleted."
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    VendorDirectoryPayload:
      oneOf:
                - type: object
                  description: "Music Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    musicEquipment:
                      type: boolean
                      description: "Whether the music vendor provides music equipment"
                - type: object
                  description: "Caterer Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    cuisine:
                      type: array
                      description: "Cuisines offered by the caterer"
                      items:
                        type: string
                    orderQuantity:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                - type: object
                  description: "Mehendi Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - numberOfArtists
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    numberOfArtists:
                      type: integer
                      description: "Number of mehendi artists available"
                    orderQuantity:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                - type: object
                  description: "Decorator Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - props
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    props:
                      type: array
                      description: "Props provided by the decorator"
                      items:
                        type: string
                    orderQuantity:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                - type: object
                  description: "Travel Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - fleet
                    - passengers
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    fleet:
                      type: array
                      description: "Available car fleet for travel"
                      items:
                        type: string
                    passengers:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                - type: object
                  description: "Hotel Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - roomType
                    - guests
                    - airportTransfer
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    roomType:
                      type: array
                      description: "Available room types"
                      items:
                        type: string
                    guests:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                    airportTransfer:
                      type: boolean
                      description: "Whether airport transfer is provided"
                - type: object
                  description: "Venue Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - services
                    - capacity
                    - parkingSpots
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    services:
                      type: array
                      description: "Venue services offered"
                      items:
                        type: string
                    capacity:
                      type: object
                      properties:
                        minimum:
                          type: integer
                        maximum:
                          type: integer
                    parkingSpots:
                      type: integer
                      description: "Number of parking spots available"
                - type: object
                  description: "Pandit Vendor payload"
                  required:
                    - businessName
                    - contactDetails
                    - address
                    - description
                    - events
                    - company
                    - price
                    - cuisine
                    - orderQuantity
                    - ritualItems
                  properties:
                    businessName:
                      type: string
                    contactDetails:
                      type: object
                      properties:
                        phone:
                          type: string
                        email:
                          type: string
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        zip:
                          type: string
                    price:
                      type: object
                      properties:
                        amount:
                          type: number
                        currency:
                          type: string
                    description:
                      type: string
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                    company:
                      type: string
                    ritualItems:
                      type: boolean
                      description: "Whether ritual items are provided"
    ICaterer:
      type: object
      required: 
        - catererName
        - address
        - contactDetails
        - company
      properties:
        catererName:
          type: string
          example: "Delicious Catering"
        address:
          $ref: '#/components/schemas/Address'
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        company:
          type: string
          description: "ObjectId of the company"
          example: "60d21b4667d0d8992e610c85"
    CateringDetails:
      type: object
      required: 
        - caterer
        - estimatedGuests
        - startsFrom
        - contactDetails
        - menu
        - company
      properties:
        caterer:
          type: string
          description: ObjectId of the caterer.
          example: '605c72efb5a1c33e4a8a92b7'
        company:
          type: string
          description: ObjectId of the company.
          example: '605c72efb5a1c33e4a8a92w7'
        estimatedGuests:
          type: number
          example: 200
        startsFrom:
          type: string
          format: date-time
          example: '2024-10-07T12:00:00Z'
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        menu:
          $ref: '#/components/schemas/Menu'
    ContactDetails:
      type: object
      properties:
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        primaryContactNumber:
          type: number
          example: 1234567890
        secondaryContactNumber:
          type: number
          example: 9876543210
        email:
          type: string
          example: 'john.doe@example.com'
    Menu:
      type: object
      properties:
        beverages:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        starters:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        mainCourse:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        dessert:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      type: object
      properties:
        title:
          type: string
          example: 'Paneer Tikka'
        subTitle:
          type: string
          example: 'Grilled cottage cheese cubes marinated with spices'
        cuisine:
          type: string
          example: 'Indian'
        mealPreference:
          type: string
          example: 'Vegetarian'
        isVegan:
          type: boolean
          example: false
        isJain:
          type: boolean
          example: true
        isSwaminarayan:
          type: boolean
          example: false
        containsAlcohol:
          type: boolean
          example: false
        isRecommendedByChef:
          type: boolean
          example: true
        description:
          type: string
          example: 'A spicy starter made from paneer.'
        ingredients:
          type: array
          items:
            type: string
          example: ['Paneer', 'Spices', 'Yogurt']
        allergicIngredients:
          type: array
          items:
            type: string
          example: ['Dairy']
        servingType:
          type: string
          example: 'Buffet'
    Venue:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        availability:
          type: object
          properties:
            from:
              type: string
              format: date-time
              example: '2024-10-07T08:00:00Z'
            to:
              type: string
              format: date-time
              example: '2024-10-07T12:00:00Z'
    Address:
      type: object
      properties:
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'San Francisco'
        state:
          type: string
          example: 'CA'
        zipCode:
          type: string
          example: '94105'
        country:
          type: string
          example: 'USA'
        coordinates:
          type: object
          properties:
            lat:
              type: number
              example: 37.7749
            lng:
              type: number
              example: -122.4194
    IBaseGuestPayload:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the guest
          example: "John"
        lastName:
          type: string
          description: Last name of the guest
          example: "Doe"
        gender:
          type: string
          enum:
            - Male
            - Female
          description: Gender of the guest
          example: "Male"
        avatar:
          type: string
          description: URL to the guest's avatar
          example: "https://example.com/avatar.jpg"
        eventId:
          type: string
          format: objectId
          description: ID of the event the guest is attending
          example: "64a51e6a4f1a2d63f7d25c9b"
        meal:
          type: string
          format: objectId
          description: Meal preference ID for the guest
          example: "64a51e6a4f1a2d63f7d25c9b"
        functions:
          type: array
          items:
            type: string
            format: objectId
          description: List of function IDs assigned to the guest
          example: ["64a51e6a4f1a2d63f7d25c9b"]
    IAddGuestPayload:
      required:
        - contactNumber
        - firstName 
        - lastName
        - gender
        - avatar
        - eventId
        - invitedBy
        - tags
      allOf:
        - $ref: '#/components/schemas/IBaseGuestPayload'
      properties:
        invitedBy:
          type: string
          enum:
            - Bride
            - Groom
            - Common
        contactNumber:
          type: number
          description: Contact number of the guest
          example: 1234567890
        subGuests:
          type: array
          items:
            $ref: '#/components/schemas/IBaseGuestPayload'
          description: List of sub-guests under this guest
        tags:
          type: array
          items:
            type: string
            format: objectId
          description: List of tag IDs for the guest
          example: ["64a51e6a4f1a2d63f7d25c9b"]
    IPatchGuestPayload:
      allOf:
        - $ref: '#/components/schemas/IAddGuestPayload'
      properties:
        guestId:
          type: string
          format: objectId
          description: ID of the guest to be patched
          example: "64a51e6a4f1a2d63f7d25c9b"
    IPatchGuestPayloadArray:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/IAddGuestPayload'
        properties:
          guestId:
            type: string
            format: objectId
            description: ID of the guest to be patched
            example: "64a51e6a4f1a2d63f7d25c9b"
    IPatchGuestCellPayload:
      required:
        - guestId
      anyOf:
        - $ref: '#/components/schemas/IBaseGuestPayload'
      properties:
        invitedBy:
          type: string
          enum:
            - Bride
            - Groom
            - Common
        guestId:
          type: string
          format: objectId
          description: ID of the guest cell to patch
          example: "64a51e6a4f1a2d63f7d25c9b"
    IMoveSubGuestPayload:
      type: object
      required:
        - guestIds
        - newPrimaryGuestId
        - currentPrimaryGuestId
      properties:
        guestIds:
          type: array
          items:
            type: string
            format: objectId
          description: List of sub-guest IDs to move
          example: ["64a51e6a4f1a2d63f7d25c9b"]
        newPrimaryGuestId:
          type: string
          format: objectId
          description: ID of the new primary guest for the sub-guests
          example: "64a51e6a4f1a2d63f7d25c9b"
        currentPrimaryGuestId:
          type: string
          format: objectId
          description: ID of the current primary guest
          example: "64a51e6a4f1a2d63f7d25c9b"
    IMovePrimaryGuestPayload:
      type: object
      required:
        - currentPrimaryGuestId
        - newGroupPrimaryGuestId
      properties:
        currentPrimaryGuestId:
          type: string
          format: objectId
          description: ID of the current primary guest
          example: "64a51e6a4f1a2d63f7d25c9b"
        newGroupPrimaryGuestId:
          type: string
          format: objectId
          description: ID of the new group primary guest
          example: "64a51e6a4f1a2d63f7d25c9b"
        currentGroupNewPrimaryGuestId:
          type: string
          format: objectId
          description: ID of the current group for the new primary guest (optional)
          example: "64a51e6a4f1a2d63f7d25c9b"
    IAddHotelPayload:
      type: object
      required:
        - name
        - companyId
        - address
        - contactNumber
        - checkInDetails
      properties:
        name:
          type: string
          description: Name of the hotel
          example: "Sunrise Hotel"
        companyId:
          type: string
          format: ObjectId
          description: The ID of the associated company
          example: "64a51e6a4f1a2d63f7d25c9b"
        address:
          type: object
          description: Address details of the hotel
          required:
            - add1
            - city
            - state
            - country
            - pinCode
            - coordinates
          properties:
            add1:
              type: string
              description: First line of the address
              example: "123 Main St"
            add2:
              type: string
              description: Second line of the address (optional)
              example: "Suite 101"
            city:
              type: string
              description: City of the hotel
              example: "New York"
            state:
              type: string
              description: State of the hotel
              example: "NY"
            country:
              type: string
              description: Country of the hotel
              example: "USA"
            pinCode:
              type: number
              description: Postal code of the hotel
              example: 10001
            coordinates:
              type: object
              description: Coordinates of the hotel
              required:
                - lat
                - lng
              properties:
                lat:
                  type: number
                  description: Latitude of the hotel
                  example: 40.7128
                lng:
                  type: number
                  description: Longitude of the hotel
                  example: -74.0060
        contactNumber:
          type: number
          description: Contact number of the hotel
          example: 1234567890
        checkInDetails:
          type: object
          description: Check-in and check-out details
          properties:
            checkInTime:
              type: string
              description: Check-in time
              example: "14:00"
            checkOutTime:
              type: string
              description: Check-out time
              example: "11:00"
    IPatchHotelPayload:
      type: object
      required:
        - hotelId
      properties:
        hotelId:
          type: string
          format: ObjectId
          description: The ID of the hotel
          example: "64a51e6a4f1a2d63f7d25c9x" 
        name:
          type: string
          description: Name of the hotel
          example: "Sunrise Hotel"
        address:
          type: object
          description: Address details of the hotel
          properties:
            add1:
              type: string
              description: First line of the address
              example: "123 Main St"
            add2:
              type: string
              description: Second line of the address (optional)
              example: "Suite 101"
            city:
              type: string
              description: City of the hotel
              example: "New York"
            state:
              type: string
              description: State of the hotel
              example: "NY"
            country:
              type: string
              description: Country of the hotel
              example: "USA"
            pinCode:
              type: number
              description: Postal code of the hotel
              example: 10001
            coordinates:
              type: object
              description: Coordinates of the hotel
              required:
                - lat
                - lng
              properties:
                lat:
                  type: number
                  description: Latitude of the hotel
                  example: 40.7128
                lng:
                  type: number
                  description: Longitude of the hotel
                  example: -74.0060
        contactNumber:
          type: number
          description: Contact number of the hotel
          example: 1234567890
        checkInDetails:
          type: object
          description: Check-in and check-out details
          properties:
            checkInTime:
              type: string
              description: Check-in time
              example: "14:00"
            checkOutTime:
              type: string
              description: Check-out time
              example: "11:00"
    IAddHotelToEventPayload:
      type: object
      required:
        - eventId
        - hotelId
        - contactDetails
        - tagIds
      properties:
        eventId:
          type: string
          format: ObjectId
          description: ID of the event
          example: "66e189a48dacf4f20d7e51d2"
        hotelId:
          type: string
          format: ObjectId
          description: ID of the hotel
          example: "66ea88b197a39eefb4f2eac3"
        contactDetails:
          $ref: '#/components/schemas/IContactDetails'
        tagIds:
          type: array
          items:
            type: string
            format: ObjectId
            description: IDs of associated tags
          example: 
            - "66e18b9a07c4906c47181669"
            - "66e18cdbf2d43d6993cd7b42"
    IContactDetails:
      type: object
      required:
        - firstName
        - lastName
        - primaryContactNumber
        - email
      properties:
        firstName:
          type: string
          description: First name of the contact person
          example: "John"
        lastName:
          type: string
          description: Last name of the contact person
          example: "Doe"
        primaryContactNumber:
          type: number
          description: Primary contact number
          example: 1234567890
        secondaryContactNumber:
          type: number
          description: Secondary contact number (optional)
          example: 9876543210
        email:
          type: string
          description: Contact email address
          example: "john.doe@example.com"
    Price:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          example: 1000
          description: "The cost of the plan."
        currency:
          type: string
          example: "USD"
          description: "The currency of the price."
    IPlanType:
      type: object
      required:
        - planName
        - numberOfGuests
        - numberOfFunctions
        - storageCapacity
        - price
      properties:
        planName:
          type: string
          example: "Gold Plan"
          description: "The name of the plan."
        numberOfGuests:
          type: integer
          example: 200
          description: "The number of guests included in the plan."
        numberOfFunctions:
          type: integer
          example: 5
          description: "The number of functions allowed under the plan."
        storageCapacity:
          type: string
          example: "50GB"
          description: "The storage capacity provided by the plan."
        price:
          $ref: '#/components/schemas/Price'
    BedType:
      type: string
      enum:
        - Single
        - Double
        - Queen
        - King
      example: "Queen"
      description: "Type of bed available in the room."
    View:
      type: string
      enum:
        - Sea
        - Mountain
        - City
        - Garden
      example: "Sea"
      description: "View type from the room."
    IBaseRoom:
      type: object
      required:
        - bedType
        - maxGuests
        - extraBedAllowed
        - swimmingPool
        - smokingAllowed
        - gallery
      properties:
        bedType:
          $ref: '#/components/schemas/BedType'
        maxGuests:
          type: integer
          example: 3
          description: "Maximum number of guests allowed in the room."
        extraBedAllowed:
          type: integer
          example: 1
          description: "Number of extra beds allowed in the room."
        swimmingPool:
          type: boolean
          example: true
          description: "Indicates if the room has access to a swimming pool."
        smokingAllowed:
          type: boolean
          example: false
          description: "Indicates if smoking is allowed in the room."
        gallery:
          type: boolean
          example: true
          description: "Indicates if the room has a gallery/balcony."
    IRoom:
      type: object
      required:
        - name
        - view
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: "Deluxe Room"
              description: "The name of the room."
            view:
              $ref: '#/components/schemas/View'
        - $ref: '#/components/schemas/IBaseRoom'
    IPatchRoomTypePayload:
      type: object
      required:
        - roomId
      properties:
        roomId:
          type: string
          format: ObjectId
          description: "The Id of the room that needs to be modified"
          example: "66f16453170329c8ff274872"
        name:
          type: string
          example: "Deluxe Room"
          description: "The name of the room."
        bedType:
          $ref: '#/components/schemas/BedType'
        view:
          $ref: '#/components/schemas/View'
        maxGuests:
          type: integer
          example: 3
          description: "Maximum number of guests allowed in the room."
        extraBedAllowed:
          type: integer
          example: 1
          description: "Number of extra beds allowed in the room."
        swimmingPool:
          type: boolean
          example: true
          description: "Indicates if the room has access to a swimming pool."
        smokingAllowed:
          type: boolean
          example: false
          description: "Indicates if smoking is allowed in the room."
        gallery:
          type: boolean
          example: true
          description: "Indicates if the room has a gallery/balcony."
    IAddRoomToEventPayload:
      type: object
      required:
        - roomId
        - hotelId
        - eventId
      allOf:
        - type: object
          properties:
            roomId:
              type: string
              format: ObjectId
              example: "66ea8a1c98d445d68e3f1759"
              description: "The unique identifier of the room being added to the event. This ID references the specific room in the hotel."
            eventId:
              type: string
              format: ObjectId
              example: "66ea8a1c98d445d68e3f175"
              description: "The unique identifier of the event to which the room is being associated. This ID corresponds to the event in the system."
            hotelId:
              type: string
              format: ObjectId
              example: "66ea8a1c98d445d68e3f1757"
              description: "The unique identifier of the hotel that contains the room being added to the event. This ID references the hotel entity."
            quantity:
              type: integer
              example: 10
              description: "Quantity of rooms to be booked for the event"
        - $ref: '#/components/schemas/IBaseRoom'
    IPatchEventRoomTypePayload:
      type: object
      required:
        - eventRoomRef
      allOf:
        - type: object
          properties:
            eventRoomRef:
              type: string
              format: ObjectId
              example: "66ea8a1c98d445d68e3f1759"
        - $ref: '#/components/schemas/IBaseRoom'
    ITag:
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          example: Friends
          description: Name of the tag
        color:
          type: string
          example: Blue
          description: Color of the tag
        eventId:
          type: string
          example: "66f119beb026c0eb71d5b5e4"
          description: Id of the event for an event specific tag
    IBaseTaskPayload:
      type: object
      description: "Payload for creating a new task associated with an event."
      required:
        - name
        - status
        - assignee
        - priority
        - dueDate
        - contactName
        - contactNumber
        - description
        - address
        - checkList
        - eventId
      properties:
        name:
          type: string
          example: "Book a DJ"
          description: "Name of the task."
        categoryId:
          type: string
          format: ObjectId
          example: "66e18b9a07c4906c47181669"
          description: "Optional unique identifier for the category the task belongs to."
        functionId:
          type: string
          format: ObjectId
          example: "66e18aea07c4906c47181652"
          description: "Optional unique identifier for the function associated with the task."
        status:
          type: string
          example: "Pending"
          description: "Current status of the task (e.g., Pending, Completed, In Progress)."
        assignee:
          type: array
          items:
            type: string
            example: "John Doe"
          description: "List of individuals assigned to the task."
        priority:
          type: string
          example: "High"
          description: "Priority level of the task (e.g., Low, Medium, High)."
        dueDate:
          $ref: '#/components/schemas/IDueDate'
        contactName:
          type: string
          example: "Jane Smith"
          description: "Name of the primary contact person for the task."
        contactNumber:
          type: integer
          example: 9876543210
          description: "Contact number of the primary contact person for the task."
        description:
          type: string
          example: "Book a DJ for the reception."
          description: "Detailed description of the task."
        address:
          $ref: '#/components/schemas/IAddress'
        checkList:
          type: array
          items:
            $ref: '#/components/schemas/ICheckList'
          description: "Checklist items for the task."
    ICreateTaskPayload:
      allOf:
        - $ref: '#/components/schemas/IBaseTaskPayload'
      type: object
      description: "Payload for creating a new task associated with an event."
      properties:
        attachments:
          type: array
          items:
            type: string
            format: ObjectId
            example: "66e18b9a07c4906c47181669"
          description: "Optional list of attachment IDs associated with the task."
        eventId:
          type: string
          format: ObjectId
          example: "66e189a48dacf4f20d7e51d2"
          description: "Unique identifier for the event to which the task is associated."
    ICheckList:
      type: object
      description: "A checklist item within a task."
      required:
        - label
        - checked
      properties:
        label:
          type: string
          example: "Confirm booking"
          description: "Label for the checklist item."
        checked:
          type: boolean
          example: false
          description: "Indicates whether the checklist item is completed."
    IDueDate:
      type: object
      description: "Due date details for the task."
      required:
        - date
        - timezone
      properties:
        date:
          type: string
          format: date-time
          example: "2024-10-01T09:00:00Z"
          description: "Due date and time for the task."
        timezone:
          type: string
          example: "UTC"
          description: "Timezone for the due date."
    IAddress:
      type: object
      description: "Address details associated with the task."
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
          example: "123 Main St"
          description: "Street address."
        city:
          type: string
          example: "New York"
          description: "City name."
        state:
          type: string
          example: "NY"
          description: "State or province."
        zipCode:
          type: string
          example: "10001"
          description: "Postal/Zip code."
        country:
          type: string
          example: "USA"
          description: "Country name."
    IUpdateCheckListStatus:
      type: object
      required:
        - checkListId
        - newStatus
      properties:
        checkListId:
          type: string
          format: ObjectId
          description: Object Id of the check list item that needs to be changed
          example: "66e1900966218dc66a806d39"
        newStatus:
          type: boolean
          description: new status of the check list
          example: true
    IMenuItems:
      type: object
      required:
        - title
        - subTitle
        - cusine
        - mealPreference
        - isVegan
        - isJain
        - isSwaminarayan
        - isRecommendedByChef
        - description
        - ingredients
        - allergicIngredients
        - servingType
        - containsAlcohol
      properties:
        title:
          type: string
          example: "Vegetable Soup"
        subTitle:
          type: string
          example: "A healthy vegetable soup."
        cuisine:
          type: string
          enum:
            - Italian
            - Indian
            - Chinese
            - Mexican
        mealPreference:
          type: string
          enum:
            - Vegetarian
            - Non-Vegetarian
            - Vegan
        isVegan:
          type: boolean
          example: false
        isJain:
          type: boolean
          example: false
        isSwaminarayan:
          type: boolean
          example: false
        isRecommendedByChef:
          type: boolean
          example: true
        containsAlcohol:
          type: boolean
          example: false
        description:
          type: string
          example: "A delicious vegetable soup made with fresh ingredients."
        ingredients:
          type: array
          items:
            type: string
            example: "Carrots"
        allergicIngredients:
          type: array
          items:
            type: string
            example: "Nuts"
        servingType:
          type: string
          enum:
            - Plated
            - Buffet
            - Family Style
    IMenu:
      type: object
      required:
        - title
        - description
        - starts From
        - endsAt
      properties:
        title:
          type: string
          description: Title of the menu
        description:
          type: string
          description: Description for the menu
        startsFrom:
          type: string
          description: Time at which the catering starts from
        endsAt:
          type: string
          description: Time at which the catering ends at
        beverages:
          type: array
          items:
            $ref: '#/components/schemas/IMenuItems'
        starters:
          type: array
          items:
            $ref: '#/components/schemas/IMenuItems'
        mainCourse:
          type: array
          items:
            $ref: '#/components/schemas/IMenuItems'
        dessert:
          type: array
          items:
            $ref: '#/components/schemas/IMenuItems'
    Meal:
      type: object
      description: "Details of the meal option chosen by the guest."
      properties:
        _id:
          type: string
          example: "66cdd0cdacd65a7ab834b030"
          description: "Unique identifier for the meal."
        name:
          type: string
          example: "Veg"
          description: "Name of the meal option."
        color:
          type: string
          example: "#00FF00"
          description: "Color code representing the meal type."
    FunctionDetails:
      type: object
      description: "Information about the function the guest is attending."
      properties:
        _id:
          type: string
          example: "66e3f3647679a1a4f0076cfd"
          description: "Unique identifier for the function details."
        rsvp:
          type: string
          example: "Not Sure"
          description: "RSVP status of the guest for the function."
        function:
          type: object
          description: "Details of the specific function the guest is attending."
          properties:
            _id:
              type: string
              example: "66e18aea07c4906c47181652"
              description: "Unique identifier for the function."
            name:
              type: string
              example: "Haldi"
              description: "Name of the function."
            event:
              type: string
              example: "66e189a48dacf4f20d7e51d2"
              description: "Identifier for the event associated with the function."
    Tag:
      type: object
      description: "A tag assigned to a guest for categorization or filtering."
      properties:
        _id:
          type: string
          example: "66e18b9a07c4906c47181669"
          description: "Unique identifier for the tag."
        name:
          type: string
          example: "test"
          description: "Name of the tag."
        color:
          type: string
          example: "red"
          description: "Color associated with the tag."
    AcceptedDocument:
      type: object
      description: "Details of an accepted document submitted by a guest."
      properties:
        _id:
          type: string
          example: "66f27de4eb8b262925cff0e3"
          description: "Unique identifier for the accepted document."
        type:
          type: string
          example: "passport"
          description: "Type of the accepted document."
        country:
          type: string
          example: "India"
          description: "Country associated with the document."
        path:
          type: array
          items:
            type: string
          example: ["front", "back"]
          description: "Array containing paths to document images (e.g., front, back)."
        status:
          type: string
          example: "pending"
          description: "Current status of the document (e.g., pending, approved)."
    Document:
      type: object
      description: "Details of a document submitted by a guest."
      properties:
        _id:
          type: string
          example: "66f27de4eb8b262925cff0e3"
          description: "Unique identifier for the document."
        type:
          type: string
          example: "passport"
          description: "Type of the document."
        country:
          type: string
          example: "India"
          description: "Country associated with the document."
    EventDetail:
      type: object
      description: "Details related to an event, including document status."
      properties:
        event:
          type: string
          format: ObjectId
          example: "66e189a48dacf4f20d7e51d2"
          description: "Unique identifier for the event."
        role:
          type: string
          format: ObjectId
          example: "66ba2809799d0fb7db4fd5c0"
          description: "Role identifier for the assignee within the event."
        acceptedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/AcceptedDocument'
          description: "List of documents that have been accepted."
        rejectedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          description: "List of documents that have been rejected."
        pendingDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          description: "List of documents that are pending approval."
        _id:
          type: string
          format: ObjectId
          example: "66e189a58dacf4f20d7e51d7"
          description: "Unique identifier for the event detail."
    User:
      type: object
      description: "User information, including associated event details."
      properties:
        _id:
          type: string
          example: "66e1a313698a44e7d290b718"
          description: "Unique identifier for the user."
        eventDetails:
          type: array
          items:
            $ref: '#/components/schemas/EventDetail'
          description: "List of event details associated with the user."
    Guest:
      type: object
      description: "Details of the guest attending the event."
      properties:
        _id:
          type: string
          example: "66e3f1c27679a1a4f0076cdb"
          description: "Unique identifier for the guest."
        firstName:
          type: string
          example: "Marcelina"
          description: "First name of the guest."
        lastName:
          type: string
          example: "Quigley"
          description: "Last name of the guest."
        contactNumber:
          type: integer
          example: 1234567890
          description: "Contact number of the guest."
        gender:
          type: string
          example: "Male"
          description: "Gender of the guest."
        avatar:
          type: string
          example: "string"
          description: "Avatar or profile image URL of the guest."
        functionDetails:
          type: array
          items:
            $ref: '#/components/schemas/FunctionDetails'
          description: "List of functions the guest is attending."
        invitedBy:
          type: string
          enum:
            - Bride
            - Groom
            - Common
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: "Tags associated with the guest."
        subGuests:
          type: array
          items:
            type: object
            description: "Details of sub-guests accompanying the main guest."
            properties:
              _id:
                type: string
                example: "66e3f1c27679a1a4f0076cdb"
                description: "Unique identifier for the sub-guest."
              firstName:
                type: string
                example: "Marcelina"
                description: "First name of the sub-guest."
              lastName:
                type: string
                example: "Quigley"
                description: "Last name of the sub-guest."
              contactNumber:
                type: integer
                example: 1234567891
                description: "Contact number of the sub-guest."
              gender:
                type: string
                example: "Male"
                description: "Gender of the sub-guest."
              avatar:
                type: string
                example: "string"
                description: "Avatar or profile image URL of the sub-guest."
              functionDetails:
                type: array
                items:
                  $ref: '#/components/schemas/FunctionDetails'
                description: "List of functions the sub-guest is attending."
              user:
                $ref: '#/components/schemas/User'
                description: "User information related to the sub-guest."
              event:
                type: string
                example: "66e189a48dacf4f20d7e51d2"
                description: "Event associated with the sub-guest."
              meal:
                $ref: '#/components/schemas/Meal'
                description: "Meal preferences for the sub-guest."
        user:
          $ref: '#/components/schemas/User'
          description: "User information related to the guest."
        event:
          type: string
          example: "66e189a48dacf4f20d7e51d2"
          description: "Event associated with the guest."
        meal:
          $ref: '#/components/schemas/Meal'
          description: "Meal preferences for the guest."
    GuestsResponse:
      type: object
      description: "Response schema for listing guests."
      properties:
        guests:
          type: array
          items:
            $ref: '#/components/schemas/Guest'
          description: "Array of guest objects."
    Hotel:
      type: object
      properties:
        _id:
          type: string
          example: "66ea88b197a39eefb4f2eac3"
          description: Unique identifier for the hotel.
        name:
          type: string
          example: "Test Hotel"
          description: Name of the hotel.
        company:
          type: string
          example: "66e1839f04bcf8e6974a4bdf"
          description: ID of the company that owns the hotel.
        address:
          type: object
          properties:
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                  example: 82.5008
                  description: Latitude of the hotel's location.
                lng:
                  type: number
                  example: 46.9297
                  description: Longitude of the hotel's location.
            add1:
              type: string
              example: "7752 Maude Junction"
              description: Primary address line of the hotel.
            city:
              type: string
              example: "Ernsermouth"
              description: City where the hotel is located.
            state:
              type: string
              example: "test"
              description: State where the hotel is located.
            country:
              type: string
              example: "Guyana"
              description: Country where the hotel is located.
            pinCode:
              type: integer
              example: 123456
              description: Postal code of the hotel's address.
        contactNumber:
          type: integer
          example: 1234567890
          description: Contact number for the hotel.
        checkInDetails:
          type: object
          properties:
            checkInTime:
              type: string
              example: "12 Pm"
              description: Check-in time for the hotel.
            checkOutTime:
              type: string
              example: "1 Pm"
              description: Check-out time for the hotel.
        isDeleted:
          type: boolean
          example: false
          description: Flag indicating if the hotel has been deleted.
    HotelsResponse:
      type: object
      properties:
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/Hotel'
    HotelResponse:
      type: object
      properties:
        hotel:
          type: object
          $ref: '#/components/schemas/Hotel'
    RoomTypesResponse:
      type: object
      properties:
        rooms:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IRoom'
              - type: object
                properties:
                  isDeleted:
                    type: boolean
                    example: false
                    description: "Indicates if the room is marked as deleted."
    UniqueGuestsByEvent:
      type: object
      properties:
        uniqueGuestsByEvent:
          type: object
          description: Contains the guests for a single event.
          properties:
            eventName:
              type: array
              description: List of guests associated with the event.
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: "66e3f1c27679a1a4f0076ce2"
                    description: Unique identifier for the guest.
                  firstName:
                    type: string
                    example: "Hanna"
                    description: First name of the guest.
                  lastName:
                    type: string
                    example: "Goldner"
                    description: Last name of the guest.
                  contactNumber:
                    type: integer
                    example: 1234567891
                    description: Contact number of the guest.
                  gender:
                    type: string
                    example: "Female"
                    description: Gender of the guest.
                  avatar:
                    type: string
                    example: "string"
                    description: Avatar URL of the guest.
                  functionDetails:
                    type: array
                    description: Details of functions associated with the guest.
                    items:
                      type: object
                      properties:
                        function:
                          type: string
                          example: "66e18aea07c4906c47181652"
                          description: Function identifier.
                        rsvp:
                          type: string
                          example: "Not Sure"
                          description: RSVP status of the guest.
                        _id:
                          type: string
                          example: "66e3f3647679a1a4f0076d02"
                          description: Unique identifier for the function detail.
                  tags:
                    type: array
                    description: Tags associated with the guest.
                    items:
                      type: string
                      example: "66e18b9a07c4906c47181669"
                      description: Tag identifier.
                  subGuests:
                    type: array
                    description: Sub-guests associated with the guest.
                    items:
                      type: string
                      example: "66e3f1c27679a1a4f0076ce2"
                      description: Identifier for the sub-guest.
                  user:
                    type: string
                    example: "66e1a313698a44e7d290b721"
                    description: Unique identifier for the user.
                  event:
                    type: string
                    example: "66e189a48dacf4f20d7e51d2"
                    description: Unique identifier for the event.
                  primaryGuest:
                    type: string
                    example: "66e3f1c27679a1a4f0076cdb"
                    description: Identifier for the primary guest.
                  meal:
                    type: string
                    example: "66cdd0cdacd65a7ab834b030"
                    description: Meal identifier.
    UniqueGuestsByEvents:
      type: object
      properties:
        uniqueGuestsByEvent:
          type: object
          additionalProperties:
            description: Each property key represents the event name
            type: array
            items:
              type: object
              properties:
                _id:
                  type: string
                  example: "66e3f1c27679a1a4f0076cdb"
                  description: Unique identifier for the guest.
                firstName:
                  type: string
                  example: "Marcelina"
                  description: First name of the guest.
                lastName:
                  type: string
                  example: "Quigley"
                  description: Last name of the guest.
                contactNumber:
                  type: integer
                  example: 1234567890
                  description: Contact number of the guest.
                gender:
                  type: string
                  example: "Male"
                  description: Gender of the guest.
                avatar:
                  type: string
                  example: "string"
                  description: Avatar URL of the guest.
                functionDetails:
                  type: array
                  items:
                    type: object
                    properties:
                      function:
                        type: string
                        example: "66e18aea07c4906c47181652"
                      rsvp:
                        type: string
                        example: "Not Sure"
                      _id:
                        type: string
                        example: "66e3f3647679a1a4f0076cfd"
                tags:
                  type: array
                  items:
                    type: string
                    example: "66e18b9a07c4906c47181669"
                subGuests:
                  type: array
                  items:
                    type: string
                    example: "66e3f1c27679a1a4f0076ce2"
                user:
                  type: string
                  example: "66e1a313698a44e7d290b718"
                event:
                  type: string
                  example: "66e189a48dacf4f20d7e51d2"
                meal:
                  type: string
                  example: "66cdd0cdacd65a7ab834b030"
    Task:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: "66e197a7c85bb9fa2f910f11"
          description: "Unique identifier for the task."
        category:
          $ref: '#/components/schemas/Category'
          description: "Category associated with the task."
        function:
          $ref: '#/components/schemas/Function'
          description: "Function associated with the task."
        assignee:
          type: array
          description: "List of assignees assigned to the task."
          items:
            $ref: '#/components/schemas/Assignee'
        attachments:
          type: array
          description: "List of attachments related to the task."
          items:
            $ref: '#/components/schemas/Attachment'
    Category:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: "66e18a158dacf4f20d7e51e6"
          description: "Unique identifier for the category."
        name:
          type: string
          example: "Test"
          description: "Name of the category associated with the task."
    Function:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: "66fbd5db1d5dd5f5282a3adc"
          description: The unique identifier for the function.
        event:
          type: string
          format: ObjectId
          example: "66e189a48dacf4f20d7e51d2"
          description: The unique identifier for the associated event.
        name:
          type: string
          example: "Test Reception"
          description: The name of the function.
        functionType:
          type: string
          example: "Wedding"
          description: The type of the function.
        date:
          type: string
          example: "Thu Jul 03 2025 03:02:24 GMT+0530 (India Standard Time)"
          description: The scheduled date for the function.
        startTime:
          type: string
          example: "1pm"
          description: The start time of the function.
        endTime:
          type: string
          example: "5pm"
          description: The end time of the function.
        dressCode:
          type: object
          properties:
            men:
              type: object
              properties:
                theme:
                  type: string
                  example: "Test"
                referenceImages:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: ObjectId
                        example: "66ffc8df24589a57d7594fb3"
                      path:
                        type: string
                        example: "src/uploads/dressCode/2024-10-04T10-52-15.148Z - test.jpg"
                      name:
                        type: string
                        example: "test.jpg"
                      referenceType:
                        type: string
                        example: "DressCodeAttachment"
                      function:
                        type: string
                        format: ObjectId
                        example: "66fbd5db1d5dd5f5282a3adc"
                title:
                  type: string
                  example: "Test"
                subTitle:
                  type: string
                  example: "Test"
            women:
              type: object
              properties:
                theme:
                  type: string
                  example: "Test"
                referenceImages:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: ObjectId
                        example: "66ffc8f224589a57d7594fb5"
                      path:
                        type: string
                        example: "src/uploads/dressCode/2024-10-04T10-52-34.828Z - test.jpg"
                      name:
                        type: string
                        example: "test.jpg"
                      referenceType:
                        type: string
                        example: "DressCodeAttachment"
                title:
                  type: string
                  example: "Test"
                subTitle:
                  type: string
                  example: "Test"
            backgroundImage:
              type: string
              example: "Test"
            description:
              type: string
              example: "Test"
        cateringDetails:
          type: object
          properties:
            menu:
              type: object
              properties:
                beverages:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/MenuItem'
                starters:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/MenuItem'
                mainCourse:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/MenuItem'
                dessert:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/MenuItem'
    Assignee:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: "66e1839f04bcf8e6974a4be4"
          description: "Unique identifier for the assignee."
        contactNumber:
          type: integer
          example: 9725008500
          description: "Contact number of the assignee."
        firstName:
          type: string
          example: "Nirmay"
          description: "First name of the assignee."
        lastName:
          type: string
          example: "Choksi"
          description: "Last name of the assignee."
        isOtpVerified:
          type: boolean
          example: false
          description: "Indicates if the assignee has verified their OTP."
        documents:
          type: array
          description: "List of documents associated with the assignee."
          items:
            type: string
            format: ObjectId
            example: "66e197a7c85bb9fa2f910f11"
            description: "Document identifier."
        eventDetails:
          type: array
          description: "List of event details associated with the assignee."
          items:
            $ref: '#/components/schemas/EventDetail'
        partOf:
          type: array
          description: "Details of the assignee's role and company associations."
          items:
            $ref: '#/components/schemas/PartOf'
    PartOf:
      type: object
      properties:
        roleDetails:
          type: object
          properties:
            role:
              type: string
              format: ObjectId
              example: "66ba2667799d0fb7db4fd5b4"
              description: "Role identifier for the assignee."
            permissions:
              type: array
              description: "List of permissions associated with the role."
              items:
                type: string
                example: "READ"
        company:
          type: string
          format: ObjectId
          example: "66e1839f04bcf8e6974a4bdf"
          description: "Identifier of the company the assignee is part of."
        accepted:
          type: boolean
          example: true
          description: "Indicates if the assignee has accepted the invitation."
        inviteMethod:
          type: string
          example: "whatsapp"
          description: "Method used to invite the assignee."
        _id:
          type: string
          format: ObjectId
          example: "66e1839f04bcf8e6974a4be5"
          description: "Unique identifier for the role assignment."
    Attachment:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: "66e1972d6c7757ac71fa6189"
          description: "Unique identifier for the attachment."
        path:
          type: string
          example: "src\\uploads\\taskList\\2024-09-11T13-12-13.876Z - Untitled1.jpg"
          description: "Path to the attachment file."
        name:
          type: string
          example: "Untitled1.jpg"
          description: "Name of the attachment file."
        referenceType:
          type: string
          example: "TaskAttachment"
          description: "Type of reference for the attachment."
        taskId:
          type: string
          format: ObjectId
          example: "66e197a7c85bb9fa2f910f11"
          description: "Identifier for the task associated with the attachment."
    MenuCategory:
      type: object
      properties:
        title:
          type: string
          example: string
        description:
          type: string
          example: string
        startsFrom:
          type: string
          example: string
        endsAt:
          type: string
          example: string
        beverages:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MenuItem'
        starters:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MenuItem'
        mainCourse:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MenuItem'
        dessert:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MenuItem'
    FunctionResponse:
      type: object
      properties:
        function:
          $ref: '#/components/schemas/Function'
    FunctionsResponse:
      type: object
      properties:
        functions:
          type: array
          items:
            $ref: '#/components/schemas/Function'
    OrderQuantity:
      type: object
      properties:
        min:
          type: number
          example: 11
        max:
          type: number
          example: 50
    BaseVendor:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: 66e197a7c85bb9fa2f910f11
        businessName:
          type: string
          example: Test Name
        contactDetails:
          type: object
          properties:
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
            primaryContactNumber:
              type: number
              example: 1234567890
            secondaryContactNumber:
              type: number
              example: 9876543210
            email:
              type: string
              example: john.doe@example.com
        address:
          type: object
          properties:
            street:
              type: string
              example: 123 Main St
            city:
              type: string
              example: San Francisco
            state:
              type: string
              example: CA
            zipCode:
              type: string
              example: '94105'
            country:
              type: string
              example: USA
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                  example: 37.7749
                lng:
                  type: number
                  example: -122.4194
        price:
          type: object
          properties:
            min:
              type: number
              example: 1000
            max:
              type: number
              example: 10000
            currency:
              type: string
              example: INR
            unit:
              type: string
              enum:
                - Per Hour
                - Per Day
                - Per Function
                - Per Thali
        description:
          type: string
          example: Amazing Description
        events:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: ObjectId
                example: 66e197a7c85bb9fa2f910f11
              event:
                type: string
                format: ObjectId
                example: 66e197a7c85bb9fa2f910f11
              functions:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      format: ObjectId
                      example: 66e197a7c85bb9fa2f910f11
                    function:
                      type: string
                      format: ObjectId
                      example: 66e197a7c85bb9fa2f910f11
                    quotations:
                      type: number
                      example: 10000
        company:
          type: string
          format: ObjectId
          example: 66e197a7c85bb9fa2f910f11
        vendorType:
          type: string
          enum:
            - musicVendor
            - catererVendor
            - mehendiVendor
            - decoratorVendor
            - travelVendor
            - hotelVendor
            - venueVendor
            - panditVendor
    MusicVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Band Without Singer
                - Band With Singer
                - DJ
                - Dholi
            musicEquipment:
              type: boolean
              example: false
    CatererVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            cuisine:
              type: string
              enum:
                - Asian
                - Italian
                - Mexican
                - Indian
                - French
                - American
                - Japanese
                - Mediterranean
                - Thai
                - Spanish
                - Middle Eastern
                - Greek
                - Korean
                - Caribbean
            orderQuantity:
              $ref: '#/components/schemas/OrderQuantity'
    MehendiVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            numberOfArtists:
              type: number
              example: 10
            orderQuantity:
              $ref: '#/components/schemas/OrderQuantity'
    DecoratorVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            props:
              type: string
              enum:
                - Lights
                - Tables
                - Chairs
                - Flowers
                - Sofas
                - Speakers
            orderQuantity:
              $ref: '#/components/schemas/OrderQuantity'
    TravelVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            fleet:
              type: string
              enum:
                - Sedan
                - Sedan Premium
                - SUV
                - Convertible
                - Family Car
                - Mini Bus
                - Bus
                - Luxury
            passenger:
              $ref: '#/components/schemas/OrderQuantity'
    HotelVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            roomType:
              type: string
              enum:
                - Deluxe
                - Suite
                - Standard
                - Presidential Suite
                - Villa
                - Joint Room
            guests:
              $ref: '#/components/schemas/OrderQuantity'
            airportTransfer:
              type: boolean
              example: false
    VenueVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            services:
              type: string
              enum:
                - Decoration
                - Catering
                - Lighting
                - Music
                - Valet
            capacity:
              $ref: '#/components/schemas/OrderQuantity'
            parkingSpots:
              type: number
              example: 100
    PanditVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            ritualItems:
              type: boolean
              example: false
    PhotographerVendor:
      allOf:
        - $ref: '#/components/schemas/BaseVendor'
        - type: object
          properties:
            numberOfPhotographers:
              type: number
              example: 10
            numberOfVideographers:
              type: number
              example: 10
            droneAvailable:
              type: boolean
              example: false

  responses:
    '400':
      description: Bad request - invalid input or missing parameters
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: specifies the error message
servers:
  - url: http://localhost:3000
    variables: {}
    description: Development/local server
